/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Square API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CatalogImageEntity } from '../myorderapp-square-models';
// @ts-ignore
import { CategoriesPatchBody } from '../myorderapp-square-models';
// @ts-ignore
import { CategoryEntity } from '../myorderapp-square-models';
// @ts-ignore
import { CategoryPaginatedResponse } from '../myorderapp-square-models';
// @ts-ignore
import { CategoryPatchBody } from '../myorderapp-square-models';
// @ts-ignore
import { ErrorResponse } from '../myorderapp-square-models';
// @ts-ignore
import { ItemEntity } from '../myorderapp-square-models';
// @ts-ignore
import { ItemPaginatedResponse } from '../myorderapp-square-models';
// @ts-ignore
import { ItemPatchBody } from '../myorderapp-square-models';
// @ts-ignore
import { ItemsPatchBody } from '../myorderapp-square-models';
// @ts-ignore
import { VariationEntity } from '../myorderapp-square-models';
// @ts-ignore
import { VariationPatchBody } from '../myorderapp-square-models';
/**
 * CatalogsApi - axios parameter creator
 * @export
 */
export const CatalogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Categories for Merchant ID with Items, Variations, and/or ModifierLists
         * @param {string} merchantIdOrPath 
         * @param {GetCategoriesActingAsEnum} actingAs 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [images] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (merchantIdOrPath: string, actingAs: GetCategoriesActingAsEnum, page?: number, limit?: number, locationId?: string, items?: boolean, images?: boolean, variations?: boolean, modifierLists?: boolean, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('getCategories', 'merchantIdOrPath', merchantIdOrPath)
            // verify required parameter 'actingAs' is not null or undefined
            assertParamExists('getCategories', 'actingAs', actingAs)
            const localVarPath = `/v2/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }

            if (images !== undefined) {
                localVarQueryParameter['images'] = images;
            }

            if (variations !== undefined) {
                localVarQueryParameter['variations'] = variations;
            }

            if (modifierLists !== undefined) {
                localVarQueryParameter['modifierLists'] = modifierLists;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Items in Category
         * @param {string} id 
         * @param {GetCategoriesItemsActingAsEnum} [actingAs] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [images] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesItems: async (id: string, actingAs?: GetCategoriesItemsActingAsEnum, page?: number, limit?: number, locationId?: string, images?: boolean, variations?: boolean, modifierLists?: boolean, merchantIdOrPath?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoriesItems', 'id', id)
            const localVarPath = `/v2/categories/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (images !== undefined) {
                localVarQueryParameter['images'] = images;
            }

            if (variations !== undefined) {
                localVarQueryParameter['variations'] = variations;
            }

            if (modifierLists !== undefined) {
                localVarQueryParameter['modifierLists'] = modifierLists;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get your Categories with Items, Variations, and/or ModifierLists
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [images] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {GetCategoriesMeActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesMe: async (page?: number, limit?: number, locationId?: string, items?: boolean, images?: boolean, variations?: boolean, modifierLists?: boolean, actingAs?: GetCategoriesMeActingAsEnum, merchantIdOrPath?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/categories/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }

            if (images !== undefined) {
                localVarQueryParameter['images'] = images;
            }

            if (variations !== undefined) {
                localVarQueryParameter['variations'] = variations;
            }

            if (modifierLists !== undefined) {
                localVarQueryParameter['modifierLists'] = modifierLists;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Item with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: async (id: string, locationId?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItem', 'id', id)
            const localVarPath = `/v2/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Item variations with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariationsForItem: async (id: string, locationId?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVariationsForItem', 'id', id)
            const localVarPath = `/v2/items/{id}/variations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple Categories
         * @param {Array<CategoriesPatchBody>} categoriesPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategories: async (categoriesPatchBody: Array<CategoriesPatchBody>, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoriesPatchBody' is not null or undefined
            assertParamExists('patchCategories', 'categoriesPatchBody', categoriesPatchBody)
            const localVarPath = `/v2/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoriesPatchBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} id 
         * @param {CategoryPatchBody} categoryPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategory: async (id: string, categoryPatchBody: CategoryPatchBody, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchCategory', 'id', id)
            // verify required parameter 'categoryPatchBody' is not null or undefined
            assertParamExists('patchCategory', 'categoryPatchBody', categoryPatchBody)
            const localVarPath = `/v2/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryPatchBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Item
         * @param {string} id 
         * @param {ItemPatchBody} itemPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItem: async (id: string, itemPatchBody: ItemPatchBody, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItem', 'id', id)
            // verify required parameter 'itemPatchBody' is not null or undefined
            assertParamExists('patchItem', 'itemPatchBody', itemPatchBody)
            const localVarPath = `/v2/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemPatchBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple Items
         * @param {Array<ItemsPatchBody>} itemsPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItems: async (itemsPatchBody: Array<ItemsPatchBody>, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemsPatchBody' is not null or undefined
            assertParamExists('patchItems', 'itemsPatchBody', itemsPatchBody)
            const localVarPath = `/v2/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemsPatchBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Square Catalog Image
         * @param {string} idempotencyKey 
         * @param {string} id 
         * @param {string} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemSquareImageUpload: async (idempotencyKey: string, id: string, xCustomLang?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('postItemSquareImageUpload', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postItemSquareImageUpload', 'id', id)
            const localVarPath = `/v2/items/{id}/square/image/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (idempotencyKey !== undefined) {
                localVarQueryParameter['idempotencyKey'] = idempotencyKey;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Variation
         * @param {string} id 
         * @param {VariationPatchBody} variationPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation: async (id: string, variationPatchBody: VariationPatchBody, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVariation', 'id', id)
            // verify required parameter 'variationPatchBody' is not null or undefined
            assertParamExists('updateVariation', 'variationPatchBody', variationPatchBody)
            const localVarPath = `/v2/variations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(variationPatchBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogsApi - functional programming interface
 * @export
 */
export const CatalogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Categories for Merchant ID with Items, Variations, and/or ModifierLists
         * @param {string} merchantIdOrPath 
         * @param {GetCategoriesActingAsEnum} actingAs 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [images] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(merchantIdOrPath: string, actingAs: GetCategoriesActingAsEnum, page?: number, limit?: number, locationId?: string, items?: boolean, images?: boolean, variations?: boolean, modifierLists?: boolean, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(merchantIdOrPath, actingAs, page, limit, locationId, items, images, variations, modifierLists, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Items in Category
         * @param {string} id 
         * @param {GetCategoriesItemsActingAsEnum} [actingAs] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [images] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesItems(id: string, actingAs?: GetCategoriesItemsActingAsEnum, page?: number, limit?: number, locationId?: string, images?: boolean, variations?: boolean, modifierLists?: boolean, merchantIdOrPath?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesItems(id, actingAs, page, limit, locationId, images, variations, modifierLists, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get your Categories with Items, Variations, and/or ModifierLists
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [images] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {GetCategoriesMeActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesMe(page?: number, limit?: number, locationId?: string, items?: boolean, images?: boolean, variations?: boolean, modifierLists?: boolean, actingAs?: GetCategoriesMeActingAsEnum, merchantIdOrPath?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesMe(page, limit, locationId, items, images, variations, modifierLists, actingAs, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Item with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(id: string, locationId?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(id, locationId, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Item variations with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariationsForItem(id: string, locationId?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VariationEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariationsForItem(id, locationId, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple Categories
         * @param {Array<CategoriesPatchBody>} categoriesPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCategories(categoriesPatchBody: Array<CategoriesPatchBody>, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCategories(categoriesPatchBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} id 
         * @param {CategoryPatchBody} categoryPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCategory(id: string, categoryPatchBody: CategoryPatchBody, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCategory(id, categoryPatchBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an Item
         * @param {string} id 
         * @param {ItemPatchBody} itemPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItem(id: string, itemPatchBody: ItemPatchBody, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItem(id, itemPatchBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple Items
         * @param {Array<ItemsPatchBody>} itemsPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItems(itemsPatchBody: Array<ItemsPatchBody>, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItems(itemsPatchBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Square Catalog Image
         * @param {string} idempotencyKey 
         * @param {string} id 
         * @param {string} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemSquareImageUpload(idempotencyKey: string, id: string, xCustomLang?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogImageEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postItemSquareImageUpload(idempotencyKey, id, xCustomLang, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an Variation
         * @param {string} id 
         * @param {VariationPatchBody} variationPatchBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVariation(id: string, variationPatchBody: VariationPatchBody, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariationEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVariation(id, variationPatchBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogsApi - factory interface
 * @export
 */
export const CatalogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Categories for Merchant ID with Items, Variations, and/or ModifierLists
         * @param {CatalogsApiGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(requestParameters: CatalogsApiGetCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryPaginatedResponse> {
            return localVarFp.getCategories(requestParameters.merchantIdOrPath, requestParameters.actingAs, requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.items, requestParameters.images, requestParameters.variations, requestParameters.modifierLists, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Items in Category
         * @param {CatalogsApiGetCategoriesItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesItems(requestParameters: CatalogsApiGetCategoriesItemsRequest, options?: AxiosRequestConfig): AxiosPromise<ItemPaginatedResponse> {
            return localVarFp.getCategoriesItems(requestParameters.id, requestParameters.actingAs, requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.images, requestParameters.variations, requestParameters.modifierLists, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get your Categories with Items, Variations, and/or ModifierLists
         * @param {CatalogsApiGetCategoriesMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesMe(requestParameters: CatalogsApiGetCategoriesMeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CategoryPaginatedResponse> {
            return localVarFp.getCategoriesMe(requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.items, requestParameters.images, requestParameters.variations, requestParameters.modifierLists, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Item with ID
         * @param {CatalogsApiGetItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(requestParameters: CatalogsApiGetItemRequest, options?: AxiosRequestConfig): AxiosPromise<ItemEntity> {
            return localVarFp.getItem(requestParameters.id, requestParameters.locationId, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Item variations with ID
         * @param {CatalogsApiGetVariationsForItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariationsForItem(requestParameters: CatalogsApiGetVariationsForItemRequest, options?: AxiosRequestConfig): AxiosPromise<Array<VariationEntity>> {
            return localVarFp.getVariationsForItem(requestParameters.id, requestParameters.locationId, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple Categories
         * @param {CatalogsApiPatchCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategories(requestParameters: CatalogsApiPatchCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CategoryEntity>> {
            return localVarFp.patchCategories(requestParameters.categoriesPatchBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Category
         * @param {CatalogsApiPatchCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCategory(requestParameters: CatalogsApiPatchCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CategoryEntity> {
            return localVarFp.patchCategory(requestParameters.id, requestParameters.categoryPatchBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Item
         * @param {CatalogsApiPatchItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItem(requestParameters: CatalogsApiPatchItemRequest, options?: AxiosRequestConfig): AxiosPromise<ItemEntity> {
            return localVarFp.patchItem(requestParameters.id, requestParameters.itemPatchBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple Items
         * @param {CatalogsApiPatchItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItems(requestParameters: CatalogsApiPatchItemsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ItemEntity>> {
            return localVarFp.patchItems(requestParameters.itemsPatchBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Square Catalog Image
         * @param {CatalogsApiPostItemSquareImageUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemSquareImageUpload(requestParameters: CatalogsApiPostItemSquareImageUploadRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogImageEntity> {
            return localVarFp.postItemSquareImageUpload(requestParameters.idempotencyKey, requestParameters.id, requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Variation
         * @param {CatalogsApiUpdateVariationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVariation(requestParameters: CatalogsApiUpdateVariationRequest, options?: AxiosRequestConfig): AxiosPromise<VariationEntity> {
            return localVarFp.updateVariation(requestParameters.id, requestParameters.variationPatchBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCategories operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetCategoriesRequest
 */
export interface CatalogsApiGetCategoriesRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategories
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof CatalogsApiGetCategories
     */
    readonly actingAs: GetCategoriesActingAsEnum

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCategories
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCategories
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategories
     */
    readonly locationId?: string

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategories
     */
    readonly items?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategories
     */
    readonly images?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategories
     */
    readonly variations?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategories
     */
    readonly modifierLists?: boolean

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategories
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getCategoriesItems operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetCategoriesItemsRequest
 */
export interface CatalogsApiGetCategoriesItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly id: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly actingAs?: GetCategoriesItemsActingAsEnum

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly locationId?: string

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly images?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly variations?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly modifierLists?: boolean

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesItems
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getCategoriesMe operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetCategoriesMeRequest
 */
export interface CatalogsApiGetCategoriesMeRequest {
    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly locationId?: string

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly items?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly images?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly variations?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly modifierLists?: boolean

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly actingAs?: GetCategoriesMeActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCategoriesMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getItem operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetItemRequest
 */
export interface CatalogsApiGetItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItem
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItem
     */
    readonly locationId?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItem
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getVariationsForItem operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetVariationsForItemRequest
 */
export interface CatalogsApiGetVariationsForItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetVariationsForItem
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetVariationsForItem
     */
    readonly locationId?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetVariationsForItem
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchCategories operation in CatalogsApi.
 * @export
 * @interface CatalogsApiPatchCategoriesRequest
 */
export interface CatalogsApiPatchCategoriesRequest {
    /**
     * 
     * @type {Array<CategoriesPatchBody>}
     * @memberof CatalogsApiPatchCategories
     */
    readonly categoriesPatchBody: Array<CategoriesPatchBody>

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPatchCategories
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchCategory operation in CatalogsApi.
 * @export
 * @interface CatalogsApiPatchCategoryRequest
 */
export interface CatalogsApiPatchCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPatchCategory
     */
    readonly id: string

    /**
     * 
     * @type {CategoryPatchBody}
     * @memberof CatalogsApiPatchCategory
     */
    readonly categoryPatchBody: CategoryPatchBody

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPatchCategory
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchItem operation in CatalogsApi.
 * @export
 * @interface CatalogsApiPatchItemRequest
 */
export interface CatalogsApiPatchItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPatchItem
     */
    readonly id: string

    /**
     * 
     * @type {ItemPatchBody}
     * @memberof CatalogsApiPatchItem
     */
    readonly itemPatchBody: ItemPatchBody

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPatchItem
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchItems operation in CatalogsApi.
 * @export
 * @interface CatalogsApiPatchItemsRequest
 */
export interface CatalogsApiPatchItemsRequest {
    /**
     * 
     * @type {Array<ItemsPatchBody>}
     * @memberof CatalogsApiPatchItems
     */
    readonly itemsPatchBody: Array<ItemsPatchBody>

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPatchItems
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postItemSquareImageUpload operation in CatalogsApi.
 * @export
 * @interface CatalogsApiPostItemSquareImageUploadRequest
 */
export interface CatalogsApiPostItemSquareImageUploadRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPostItemSquareImageUpload
     */
    readonly idempotencyKey: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPostItemSquareImageUpload
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiPostItemSquareImageUpload
     */
    readonly xCustomLang?: string

    /**
     * 
     * @type {File}
     * @memberof CatalogsApiPostItemSquareImageUpload
     */
    readonly file?: File
}

/**
 * Request parameters for updateVariation operation in CatalogsApi.
 * @export
 * @interface CatalogsApiUpdateVariationRequest
 */
export interface CatalogsApiUpdateVariationRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiUpdateVariation
     */
    readonly id: string

    /**
     * 
     * @type {VariationPatchBody}
     * @memberof CatalogsApiUpdateVariation
     */
    readonly variationPatchBody: VariationPatchBody

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiUpdateVariation
     */
    readonly xCustomLang?: string
}

/**
 * CatalogsApi - object-oriented interface
 * @export
 * @class CatalogsApi
 * @extends {BaseAPI}
 */
export class CatalogsApi extends BaseAPI {
    /**
     * 
     * @summary Get Categories for Merchant ID with Items, Variations, and/or ModifierLists
     * @param {CatalogsApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getCategories(requestParameters: CatalogsApiGetCategoriesRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getCategories(requestParameters.merchantIdOrPath, requestParameters.actingAs, requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.items, requestParameters.images, requestParameters.variations, requestParameters.modifierLists, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Items in Category
     * @param {CatalogsApiGetCategoriesItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getCategoriesItems(requestParameters: CatalogsApiGetCategoriesItemsRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getCategoriesItems(requestParameters.id, requestParameters.actingAs, requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.images, requestParameters.variations, requestParameters.modifierLists, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get your Categories with Items, Variations, and/or ModifierLists
     * @param {CatalogsApiGetCategoriesMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getCategoriesMe(requestParameters: CatalogsApiGetCategoriesMeRequest = {}, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getCategoriesMe(requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.items, requestParameters.images, requestParameters.variations, requestParameters.modifierLists, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Item with ID
     * @param {CatalogsApiGetItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getItem(requestParameters: CatalogsApiGetItemRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getItem(requestParameters.id, requestParameters.locationId, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Item variations with ID
     * @param {CatalogsApiGetVariationsForItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getVariationsForItem(requestParameters: CatalogsApiGetVariationsForItemRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getVariationsForItem(requestParameters.id, requestParameters.locationId, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple Categories
     * @param {CatalogsApiPatchCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public patchCategories(requestParameters: CatalogsApiPatchCategoriesRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).patchCategories(requestParameters.categoriesPatchBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Category
     * @param {CatalogsApiPatchCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public patchCategory(requestParameters: CatalogsApiPatchCategoryRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).patchCategory(requestParameters.id, requestParameters.categoryPatchBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Item
     * @param {CatalogsApiPatchItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public patchItem(requestParameters: CatalogsApiPatchItemRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).patchItem(requestParameters.id, requestParameters.itemPatchBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple Items
     * @param {CatalogsApiPatchItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public patchItems(requestParameters: CatalogsApiPatchItemsRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).patchItems(requestParameters.itemsPatchBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Square Catalog Image
     * @param {CatalogsApiPostItemSquareImageUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public postItemSquareImageUpload(requestParameters: CatalogsApiPostItemSquareImageUploadRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).postItemSquareImageUpload(requestParameters.idempotencyKey, requestParameters.id, requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Variation
     * @param {CatalogsApiUpdateVariationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public updateVariation(requestParameters: CatalogsApiUpdateVariationRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).updateVariation(requestParameters.id, requestParameters.variationPatchBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCategoriesActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetCategoriesActingAsEnum = typeof GetCategoriesActingAsEnum[keyof typeof GetCategoriesActingAsEnum];
/**
 * @export
 */
export const GetCategoriesItemsActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetCategoriesItemsActingAsEnum = typeof GetCategoriesItemsActingAsEnum[keyof typeof GetCategoriesItemsActingAsEnum];
/**
 * @export
 */
export const GetCategoriesMeActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetCategoriesMeActingAsEnum = typeof GetCategoriesMeActingAsEnum[keyof typeof GetCategoriesMeActingAsEnum];
