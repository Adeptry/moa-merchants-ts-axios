/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Square API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppConfigEntity } from '../myorderapp-square-models';
// @ts-ignore
import { AppConfigUpdateBody } from '../myorderapp-square-models';
// @ts-ignore
import { ErrorResponse } from '../myorderapp-square-models';
/**
 * AppConfigsApi - axios parameter creator
 * @export
 */
export const AppConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Config for Merchant ID
         * @param {string} merchantIdOrPath 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfig: async (merchantIdOrPath: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('getAppConfig', 'merchantIdOrPath', merchantIdOrPath)
            const localVarPath = `/v2/app-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get your Config
         * @param {string} [merchantIdOrPath] 
         * @param {GetAppConfigMeActingAsEnum} [actingAs] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigMe: async (merchantIdOrPath?: string, actingAs?: GetAppConfigMeActingAsEnum, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update your Config
         * @param {AppConfigUpdateBody} appConfigUpdateBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAppConfigMe: async (appConfigUpdateBody: AppConfigUpdateBody, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appConfigUpdateBody' is not null or undefined
            assertParamExists('patchAppConfigMe', 'appConfigUpdateBody', appConfigUpdateBody)
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appConfigUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create your Config
         * @param {AppConfigUpdateBody} appConfigUpdateBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppConfigMe: async (appConfigUpdateBody: AppConfigUpdateBody, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appConfigUpdateBody' is not null or undefined
            assertParamExists('postAppConfigMe', 'appConfigUpdateBody', appConfigUpdateBody)
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appConfigUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload banner
         * @param {string} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBannerUploadMe: async (xCustomLang?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me/banner/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload icon
         * @param {string} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIconUploadMe: async (xCustomLang?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me/icon/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppConfigsApi - functional programming interface
 * @export
 */
export const AppConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Config for Merchant ID
         * @param {string} merchantIdOrPath 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppConfig(merchantIdOrPath: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfigEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppConfig(merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get your Config
         * @param {string} [merchantIdOrPath] 
         * @param {GetAppConfigMeActingAsEnum} [actingAs] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppConfigMe(merchantIdOrPath?: string, actingAs?: GetAppConfigMeActingAsEnum, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfigEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppConfigMe(merchantIdOrPath, actingAs, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update your Config
         * @param {AppConfigUpdateBody} appConfigUpdateBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAppConfigMe(appConfigUpdateBody: AppConfigUpdateBody, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfigEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAppConfigMe(appConfigUpdateBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create your Config
         * @param {AppConfigUpdateBody} appConfigUpdateBody 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAppConfigMe(appConfigUpdateBody: AppConfigUpdateBody, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfigEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAppConfigMe(appConfigUpdateBody, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload banner
         * @param {string} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBannerUploadMe(xCustomLang?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBannerUploadMe(xCustomLang, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload icon
         * @param {string} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIconUploadMe(xCustomLang?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIconUploadMe(xCustomLang, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppConfigsApi - factory interface
 * @export
 */
export const AppConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppConfigsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Config for Merchant ID
         * @param {AppConfigsApiGetAppConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfig(requestParameters: AppConfigsApiGetAppConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AppConfigEntity> {
            return localVarFp.getAppConfig(requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get your Config
         * @param {AppConfigsApiGetAppConfigMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigMe(requestParameters: AppConfigsApiGetAppConfigMeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppConfigEntity> {
            return localVarFp.getAppConfigMe(requestParameters.merchantIdOrPath, requestParameters.actingAs, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update your Config
         * @param {AppConfigsApiPatchAppConfigMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAppConfigMe(requestParameters: AppConfigsApiPatchAppConfigMeRequest, options?: AxiosRequestConfig): AxiosPromise<AppConfigEntity> {
            return localVarFp.patchAppConfigMe(requestParameters.appConfigUpdateBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create your Config
         * @param {AppConfigsApiPostAppConfigMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppConfigMe(requestParameters: AppConfigsApiPostAppConfigMeRequest, options?: AxiosRequestConfig): AxiosPromise<AppConfigEntity> {
            return localVarFp.postAppConfigMe(requestParameters.appConfigUpdateBody, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload banner
         * @param {AppConfigsApiPostBannerUploadMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBannerUploadMe(requestParameters: AppConfigsApiPostBannerUploadMeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postBannerUploadMe(requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload icon
         * @param {AppConfigsApiPostIconUploadMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIconUploadMe(requestParameters: AppConfigsApiPostIconUploadMeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postIconUploadMe(requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAppConfig operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiGetAppConfigRequest
 */
export interface AppConfigsApiGetAppConfigRequest {
    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiGetAppConfig
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiGetAppConfig
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getAppConfigMe operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiGetAppConfigMeRequest
 */
export interface AppConfigsApiGetAppConfigMeRequest {
    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiGetAppConfigMe
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof AppConfigsApiGetAppConfigMe
     */
    readonly actingAs?: GetAppConfigMeActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiGetAppConfigMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchAppConfigMe operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPatchAppConfigMeRequest
 */
export interface AppConfigsApiPatchAppConfigMeRequest {
    /**
     * 
     * @type {AppConfigUpdateBody}
     * @memberof AppConfigsApiPatchAppConfigMe
     */
    readonly appConfigUpdateBody: AppConfigUpdateBody

    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiPatchAppConfigMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postAppConfigMe operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPostAppConfigMeRequest
 */
export interface AppConfigsApiPostAppConfigMeRequest {
    /**
     * 
     * @type {AppConfigUpdateBody}
     * @memberof AppConfigsApiPostAppConfigMe
     */
    readonly appConfigUpdateBody: AppConfigUpdateBody

    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiPostAppConfigMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postBannerUploadMe operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPostBannerUploadMeRequest
 */
export interface AppConfigsApiPostBannerUploadMeRequest {
    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiPostBannerUploadMe
     */
    readonly xCustomLang?: string

    /**
     * 
     * @type {File}
     * @memberof AppConfigsApiPostBannerUploadMe
     */
    readonly file?: File
}

/**
 * Request parameters for postIconUploadMe operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPostIconUploadMeRequest
 */
export interface AppConfigsApiPostIconUploadMeRequest {
    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiPostIconUploadMe
     */
    readonly xCustomLang?: string

    /**
     * 
     * @type {File}
     * @memberof AppConfigsApiPostIconUploadMe
     */
    readonly file?: File
}

/**
 * AppConfigsApi - object-oriented interface
 * @export
 * @class AppConfigsApi
 * @extends {BaseAPI}
 */
export class AppConfigsApi extends BaseAPI {
    /**
     * 
     * @summary Get Config for Merchant ID
     * @param {AppConfigsApiGetAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public getAppConfig(requestParameters: AppConfigsApiGetAppConfigRequest, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).getAppConfig(requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get your Config
     * @param {AppConfigsApiGetAppConfigMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public getAppConfigMe(requestParameters: AppConfigsApiGetAppConfigMeRequest = {}, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).getAppConfigMe(requestParameters.merchantIdOrPath, requestParameters.actingAs, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update your Config
     * @param {AppConfigsApiPatchAppConfigMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public patchAppConfigMe(requestParameters: AppConfigsApiPatchAppConfigMeRequest, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).patchAppConfigMe(requestParameters.appConfigUpdateBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create your Config
     * @param {AppConfigsApiPostAppConfigMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public postAppConfigMe(requestParameters: AppConfigsApiPostAppConfigMeRequest, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).postAppConfigMe(requestParameters.appConfigUpdateBody, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload banner
     * @param {AppConfigsApiPostBannerUploadMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public postBannerUploadMe(requestParameters: AppConfigsApiPostBannerUploadMeRequest = {}, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).postBannerUploadMe(requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload icon
     * @param {AppConfigsApiPostIconUploadMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public postIconUploadMe(requestParameters: AppConfigsApiPostIconUploadMeRequest = {}, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).postIconUploadMe(requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAppConfigMeActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetAppConfigMeActingAsEnum = typeof GetAppConfigMeActingAsEnum[keyof typeof GetAppConfigMeActingAsEnum];
