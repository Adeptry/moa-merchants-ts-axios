/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Square API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../myorderapp-square-models';
// @ts-ignore
import { OrderEntity } from '../myorderapp-square-models';
// @ts-ignore
import { OrderPatchBody } from '../myorderapp-square-models';
// @ts-ignore
import { OrderPostBody } from '../myorderapp-square-models';
// @ts-ignore
import { OrderPostCurrentBody } from '../myorderapp-square-models';
// @ts-ignore
import { OrdersPaginatedResponse } from '../myorderapp-square-models';
// @ts-ignore
import { OrdersPostPaymentBody } from '../myorderapp-square-models';
// @ts-ignore
import { OrdersStatisticsResponse } from '../myorderapp-square-models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove Line Items from Order
         * @param {string} id 
         * @param {string} merchantIdOrPath 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItemCurrent: async (id: string, merchantIdOrPath: string, lineItems?: boolean, location?: boolean, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLineItemCurrent', 'id', id)
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('deleteLineItemCurrent', 'merchantIdOrPath', merchantIdOrPath)
            const localVarPath = `/v2/orders/current/line-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Order
         * @param {string} merchantIdOrPath 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderCurrent: async (merchantIdOrPath: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('deleteOrderCurrent', 'merchantIdOrPath', merchantIdOrPath)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Order
         * @param {string} id 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {GetOrderActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: string, lineItems?: boolean, location?: boolean, actingAs?: GetOrderActingAsEnum, merchantIdOrPath?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/v2/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current Order
         * @param {string} merchantIdOrPath 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderCurrent: async (merchantIdOrPath: string, lineItems?: boolean, location?: boolean, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('getOrderCurrent', 'merchantIdOrPath', merchantIdOrPath)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get your statistics
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderStatisticsMe: async (startDate?: string, endDate?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/orders/statistics/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my Orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [closed] 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {boolean} [customer] 
         * @param {GetOrdersOrderFieldEnum} [orderField] 
         * @param {GetOrdersOrderSortEnum} [orderSort] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {GetOrdersActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (page?: number, limit?: number, closed?: boolean, lineItems?: boolean, location?: boolean, customer?: boolean, orderField?: GetOrdersOrderFieldEnum, orderSort?: GetOrdersOrderSortEnum, startDate?: string, endDate?: string, actingAs?: GetOrdersActingAsEnum, merchantIdOrPath?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/orders/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (closed !== undefined) {
                localVarQueryParameter['closed'] = closed;
            }

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (orderField !== undefined) {
                localVarQueryParameter['orderField'] = orderField;
            }

            if (orderSort !== undefined) {
                localVarQueryParameter['orderSort'] = orderSort;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch update Order, e.g. modify Location
         * @param {OrderPatchBody} orderPatchBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrderCurrent: async (orderPatchBody: OrderPatchBody, lineItems?: boolean, location?: boolean, idempotencyKey?: string, merchantIdOrPath?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderPatchBody' is not null or undefined
            assertParamExists('patchOrderCurrent', 'orderPatchBody', orderPatchBody)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (idempotencyKey !== undefined) {
                localVarQueryParameter['idempotencyKey'] = idempotencyKey;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderPatchBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Order
         * @param {string} merchantIdOrPath 
         * @param {OrderPostBody} orderPostBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrder: async (merchantIdOrPath: string, orderPostBody: OrderPostBody, lineItems?: boolean, location?: boolean, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('postOrder', 'merchantIdOrPath', merchantIdOrPath)
            // verify required parameter 'orderPostBody' is not null or undefined
            assertParamExists('postOrder', 'orderPostBody', orderPostBody)
            const localVarPath = `/v2/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
         * @param {string} merchantIdOrPath 
         * @param {OrderPostCurrentBody} orderPostCurrentBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderCurrent: async (merchantIdOrPath: string, orderPostCurrentBody: OrderPostCurrentBody, lineItems?: boolean, location?: boolean, idempotencyKey?: string, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('postOrderCurrent', 'merchantIdOrPath', merchantIdOrPath)
            // verify required parameter 'orderPostCurrentBody' is not null or undefined
            assertParamExists('postOrderCurrent', 'orderPostCurrentBody', orderPostCurrentBody)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (idempotencyKey !== undefined) {
                localVarQueryParameter['idempotencyKey'] = idempotencyKey;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderPostCurrentBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pay for Order
         * @param {string} merchantIdOrPath 
         * @param {OrdersPostPaymentBody} ordersPostPaymentBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSquarePaymentOrderCurrent: async (merchantIdOrPath: string, ordersPostPaymentBody: OrdersPostPaymentBody, lineItems?: boolean, location?: boolean, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('postSquarePaymentOrderCurrent', 'merchantIdOrPath', merchantIdOrPath)
            // verify required parameter 'ordersPostPaymentBody' is not null or undefined
            assertParamExists('postSquarePaymentOrderCurrent', 'ordersPostPaymentBody', ordersPostPaymentBody)
            const localVarPath = `/v2/orders/current/payment/square`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ordersPostPaymentBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Remove Line Items from Order
         * @param {string} id 
         * @param {string} merchantIdOrPath 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLineItemCurrent(id: string, merchantIdOrPath: string, lineItems?: boolean, location?: boolean, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLineItemCurrent(id, merchantIdOrPath, lineItems, location, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Order
         * @param {string} merchantIdOrPath 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrderCurrent(merchantIdOrPath: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrderCurrent(merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Order
         * @param {string} id 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {GetOrderActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: string, lineItems?: boolean, location?: boolean, actingAs?: GetOrderActingAsEnum, merchantIdOrPath?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, lineItems, location, actingAs, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current Order
         * @param {string} merchantIdOrPath 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderCurrent(merchantIdOrPath: string, lineItems?: boolean, location?: boolean, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderCurrent(merchantIdOrPath, lineItems, location, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get your statistics
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderStatisticsMe(startDate?: string, endDate?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersStatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderStatisticsMe(startDate, endDate, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get my Orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [closed] 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {boolean} [customer] 
         * @param {GetOrdersOrderFieldEnum} [orderField] 
         * @param {GetOrdersOrderSortEnum} [orderSort] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {GetOrdersActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(page?: number, limit?: number, closed?: boolean, lineItems?: boolean, location?: boolean, customer?: boolean, orderField?: GetOrdersOrderFieldEnum, orderSort?: GetOrdersOrderSortEnum, startDate?: string, endDate?: string, actingAs?: GetOrdersActingAsEnum, merchantIdOrPath?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(page, limit, closed, lineItems, location, customer, orderField, orderSort, startDate, endDate, actingAs, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Patch update Order, e.g. modify Location
         * @param {OrderPatchBody} orderPatchBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {string} [merchantIdOrPath] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrderCurrent(orderPatchBody: OrderPatchBody, lineItems?: boolean, location?: boolean, idempotencyKey?: string, merchantIdOrPath?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrderCurrent(orderPatchBody, lineItems, location, idempotencyKey, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Order
         * @param {string} merchantIdOrPath 
         * @param {OrderPostBody} orderPostBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrder(merchantIdOrPath: string, orderPostBody: OrderPostBody, lineItems?: boolean, location?: boolean, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrder(merchantIdOrPath, orderPostBody, lineItems, location, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
         * @param {string} merchantIdOrPath 
         * @param {OrderPostCurrentBody} orderPostCurrentBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrderCurrent(merchantIdOrPath: string, orderPostCurrentBody: OrderPostCurrentBody, lineItems?: boolean, location?: boolean, idempotencyKey?: string, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrderCurrent(merchantIdOrPath, orderPostCurrentBody, lineItems, location, idempotencyKey, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pay for Order
         * @param {string} merchantIdOrPath 
         * @param {OrdersPostPaymentBody} ordersPostPaymentBody 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSquarePaymentOrderCurrent(merchantIdOrPath: string, ordersPostPaymentBody: OrdersPostPaymentBody, lineItems?: boolean, location?: boolean, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSquarePaymentOrderCurrent(merchantIdOrPath, ordersPostPaymentBody, lineItems, location, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Remove Line Items from Order
         * @param {OrdersApiDeleteLineItemCurrentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItemCurrent(requestParameters: OrdersApiDeleteLineItemCurrentRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.deleteLineItemCurrent(requestParameters.id, requestParameters.merchantIdOrPath, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Order
         * @param {OrdersApiDeleteOrderCurrentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrderCurrent(requestParameters: OrdersApiDeleteOrderCurrentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Order
         * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.getOrder(requestParameters.id, requestParameters.lineItems, requestParameters.location, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current Order
         * @param {OrdersApiGetOrderCurrentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderCurrent(requestParameters: OrdersApiGetOrderCurrentRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.getOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get your statistics
         * @param {OrdersApiGetOrderStatisticsMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderStatisticsMe(requestParameters: OrdersApiGetOrderStatisticsMeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OrdersStatisticsResponse> {
            return localVarFp.getOrderStatisticsMe(requestParameters.startDate, requestParameters.endDate, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my Orders
         * @param {OrdersApiGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(requestParameters: OrdersApiGetOrdersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OrdersPaginatedResponse> {
            return localVarFp.getOrders(requestParameters.page, requestParameters.limit, requestParameters.closed, requestParameters.lineItems, requestParameters.location, requestParameters.customer, requestParameters.orderField, requestParameters.orderSort, requestParameters.startDate, requestParameters.endDate, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch update Order, e.g. modify Location
         * @param {OrdersApiPatchOrderCurrentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrderCurrent(requestParameters: OrdersApiPatchOrderCurrentRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.patchOrderCurrent(requestParameters.orderPatchBody, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Order
         * @param {OrdersApiPostOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrder(requestParameters: OrdersApiPostOrderRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.postOrder(requestParameters.merchantIdOrPath, requestParameters.orderPostBody, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
         * @param {OrdersApiPostOrderCurrentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrderCurrent(requestParameters: OrdersApiPostOrderCurrentRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.postOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.orderPostCurrentBody, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pay for Order
         * @param {OrdersApiPostSquarePaymentOrderCurrentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSquarePaymentOrderCurrent(requestParameters: OrdersApiPostSquarePaymentOrderCurrentRequest, options?: AxiosRequestConfig): AxiosPromise<OrderEntity> {
            return localVarFp.postSquarePaymentOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.ordersPostPaymentBody, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteLineItemCurrent operation in OrdersApi.
 * @export
 * @interface OrdersApiDeleteLineItemCurrentRequest
 */
export interface OrdersApiDeleteLineItemCurrentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteLineItemCurrent
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteLineItemCurrent
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiDeleteLineItemCurrent
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiDeleteLineItemCurrent
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteLineItemCurrent
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for deleteOrderCurrent operation in OrdersApi.
 * @export
 * @interface OrdersApiDeleteOrderCurrentRequest
 */
export interface OrdersApiDeleteOrderCurrentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteOrderCurrent
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteOrderCurrent
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRequest
 */
export interface OrdersApiGetOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly id: string

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrder
     */
    readonly location?: boolean

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof OrdersApiGetOrder
     */
    readonly actingAs?: GetOrderActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getOrderCurrent operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderCurrentRequest
 */
export interface OrdersApiGetOrderCurrentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrderCurrent
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrderCurrent
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrderCurrent
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrderCurrent
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getOrderStatisticsMe operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderStatisticsMeRequest
 */
export interface OrdersApiGetOrderStatisticsMeRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrderStatisticsMe
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrderStatisticsMe
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrderStatisticsMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for getOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrdersRequest
 */
export interface OrdersApiGetOrdersRequest {
    /**
     * 
     * @type {number}
     * @memberof OrdersApiGetOrders
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof OrdersApiGetOrders
     */
    readonly limit?: number

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly closed?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly location?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly customer?: boolean

    /**
     * 
     * @type {'id' | 'squareId' | 'pickupDate' | 'closedDate' | 'customerId' | 'locationId' | 'totalMoneyAmount' | 'totalTaxMoneyAmount' | 'totalDiscountMoneyAmount' | 'totalTipMoneyAmount' | 'totalServiceChargeMoneyAmount' | 'appFeeMoneyAmount'}
     * @memberof OrdersApiGetOrders
     */
    readonly orderField?: GetOrdersOrderFieldEnum

    /**
     * 
     * @type {'ASC' | 'DESC'}
     * @memberof OrdersApiGetOrders
     */
    readonly orderSort?: GetOrdersOrderSortEnum

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly endDate?: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof OrdersApiGetOrders
     */
    readonly actingAs?: GetOrdersActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchOrderCurrent operation in OrdersApi.
 * @export
 * @interface OrdersApiPatchOrderCurrentRequest
 */
export interface OrdersApiPatchOrderCurrentRequest {
    /**
     * 
     * @type {OrderPatchBody}
     * @memberof OrdersApiPatchOrderCurrent
     */
    readonly orderPatchBody: OrderPatchBody

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPatchOrderCurrent
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPatchOrderCurrent
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPatchOrderCurrent
     */
    readonly idempotencyKey?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPatchOrderCurrent
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPatchOrderCurrent
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiPostOrderRequest
 */
export interface OrdersApiPostOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostOrder
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {OrderPostBody}
     * @memberof OrdersApiPostOrder
     */
    readonly orderPostBody: OrderPostBody

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostOrder
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostOrder
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postOrderCurrent operation in OrdersApi.
 * @export
 * @interface OrdersApiPostOrderCurrentRequest
 */
export interface OrdersApiPostOrderCurrentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostOrderCurrent
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {OrderPostCurrentBody}
     * @memberof OrdersApiPostOrderCurrent
     */
    readonly orderPostCurrentBody: OrderPostCurrentBody

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostOrderCurrent
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostOrderCurrent
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostOrderCurrent
     */
    readonly idempotencyKey?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostOrderCurrent
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postSquarePaymentOrderCurrent operation in OrdersApi.
 * @export
 * @interface OrdersApiPostSquarePaymentOrderCurrentRequest
 */
export interface OrdersApiPostSquarePaymentOrderCurrentRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostSquarePaymentOrderCurrent
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {OrdersPostPaymentBody}
     * @memberof OrdersApiPostSquarePaymentOrderCurrent
     */
    readonly ordersPostPaymentBody: OrdersPostPaymentBody

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostSquarePaymentOrderCurrent
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostSquarePaymentOrderCurrent
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostSquarePaymentOrderCurrent
     */
    readonly xCustomLang?: string
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Remove Line Items from Order
     * @param {OrdersApiDeleteLineItemCurrentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public deleteLineItemCurrent(requestParameters: OrdersApiDeleteLineItemCurrentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).deleteLineItemCurrent(requestParameters.id, requestParameters.merchantIdOrPath, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Order
     * @param {OrdersApiDeleteOrderCurrentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public deleteOrderCurrent(requestParameters: OrdersApiDeleteOrderCurrentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).deleteOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Order
     * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrder(requestParameters.id, requestParameters.lineItems, requestParameters.location, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current Order
     * @param {OrdersApiGetOrderCurrentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderCurrent(requestParameters: OrdersApiGetOrderCurrentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get your statistics
     * @param {OrdersApiGetOrderStatisticsMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderStatisticsMe(requestParameters: OrdersApiGetOrderStatisticsMeRequest = {}, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrderStatisticsMe(requestParameters.startDate, requestParameters.endDate, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my Orders
     * @param {OrdersApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrders(requestParameters: OrdersApiGetOrdersRequest = {}, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrders(requestParameters.page, requestParameters.limit, requestParameters.closed, requestParameters.lineItems, requestParameters.location, requestParameters.customer, requestParameters.orderField, requestParameters.orderSort, requestParameters.startDate, requestParameters.endDate, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch update Order, e.g. modify Location
     * @param {OrdersApiPatchOrderCurrentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public patchOrderCurrent(requestParameters: OrdersApiPatchOrderCurrentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).patchOrderCurrent(requestParameters.orderPatchBody, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Order
     * @param {OrdersApiPostOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public postOrder(requestParameters: OrdersApiPostOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).postOrder(requestParameters.merchantIdOrPath, requestParameters.orderPostBody, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
     * @param {OrdersApiPostOrderCurrentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public postOrderCurrent(requestParameters: OrdersApiPostOrderCurrentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).postOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.orderPostCurrentBody, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pay for Order
     * @param {OrdersApiPostSquarePaymentOrderCurrentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public postSquarePaymentOrderCurrent(requestParameters: OrdersApiPostSquarePaymentOrderCurrentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).postSquarePaymentOrderCurrent(requestParameters.merchantIdOrPath, requestParameters.ordersPostPaymentBody, requestParameters.lineItems, requestParameters.location, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetOrderActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetOrderActingAsEnum = typeof GetOrderActingAsEnum[keyof typeof GetOrderActingAsEnum];
/**
 * @export
 */
export const GetOrdersOrderFieldEnum = {
    Id: 'id',
    SquareId: 'squareId',
    PickupDate: 'pickupDate',
    ClosedDate: 'closedDate',
    CustomerId: 'customerId',
    LocationId: 'locationId',
    TotalMoneyAmount: 'totalMoneyAmount',
    TotalTaxMoneyAmount: 'totalTaxMoneyAmount',
    TotalDiscountMoneyAmount: 'totalDiscountMoneyAmount',
    TotalTipMoneyAmount: 'totalTipMoneyAmount',
    TotalServiceChargeMoneyAmount: 'totalServiceChargeMoneyAmount',
    AppFeeMoneyAmount: 'appFeeMoneyAmount'
} as const;
export type GetOrdersOrderFieldEnum = typeof GetOrdersOrderFieldEnum[keyof typeof GetOrdersOrderFieldEnum];
/**
 * @export
 */
export const GetOrdersOrderSortEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetOrdersOrderSortEnum = typeof GetOrdersOrderSortEnum[keyof typeof GetOrdersOrderSortEnum];
/**
 * @export
 */
export const GetOrdersActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetOrdersActingAsEnum = typeof GetOrdersActingAsEnum[keyof typeof GetOrdersActingAsEnum];
