/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'id'?: string;
    /**
     * The first line of the address.
     * @type {string}
     * @memberof Address
     */
    'addressLine1'?: string;
    /**
     * The second line of the address, if any.
     * @type {string}
     * @memberof Address
     */
    'addressLine2'?: string;
    /**
     * The third line of the address, if any.
     * @type {string}
     * @memberof Address
     */
    'addressLine3'?: string;
    /**
     * The city or town of the address.
     * @type {string}
     * @memberof Address
     */
    'locality'?: string;
    /**
     * A civil region within the address\'s `locality`, if any.
     * @type {string}
     * @memberof Address
     */
    'sublocality'?: string;
    /**
     * A civil region within the address\'s `sublocality`, if any.
     * @type {string}
     * @memberof Address
     */
    'sublocality2'?: string;
    /**
     * A civil region within the address\'s `sublocality_2`, if any.
     * @type {string}
     * @memberof Address
     */
    'sublocality3'?: string;
    /**
     * A civil entity within the address\'s country. In the US, this is the state.
     * @type {string}
     * @memberof Address
     */
    'administrativeDistrictLevel1'?: string;
    /**
     * A civil entity within the address\'s `administrative_district_level_1`. In the US, this is the county.
     * @type {string}
     * @memberof Address
     */
    'administrativeDistrictLevel2'?: string;
    /**
     * A civil entity within the address\'s `administrative_district_level_2`, if any.
     * @type {string}
     * @memberof Address
     */
    'administrativeDistrictLevel3'?: string;
    /**
     * The address\'s postal code.
     * @type {string}
     * @memberof Address
     */
    'postalCode'?: string;
    /**
     * Indicates the country associated with another entity, such as a business. Values are in ISO 3166-1-alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    'country'?: string;
    /**
     * Optional first name when it\'s representing recipient.
     * @type {string}
     * @memberof Address
     */
    'firstName'?: string;
    /**
     * Optional last name when it\'s representing recipient.
     * @type {string}
     * @memberof Address
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface AppConfig
 */
export interface AppConfig {
    /**
     * 
     * @type {string}
     * @memberof AppConfig
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppConfig
     */
    'seedColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppConfig
     */
    'fontFamily'?: string;
}
/**
 * 
 * @export
 * @interface AuthAppleLoginDto
 */
export interface AuthAppleLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthAppleLoginDto
     */
    'idToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppleLoginDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppleLoginDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthAppleLoginDto
     */
    'role': AuthAppleLoginDtoRoleEnum;
}

export const AuthAppleLoginDtoRoleEnum = {
    Admin: 'admin',
    User: 'user'
} as const;

export type AuthAppleLoginDtoRoleEnum = typeof AuthAppleLoginDtoRoleEnum[keyof typeof AuthAppleLoginDtoRoleEnum];

/**
 * 
 * @export
 * @interface AuthEmailLoginDto
 */
export interface AuthEmailLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthEmailLoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthEmailLoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthFacebookLoginDto
 */
export interface AuthFacebookLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthFacebookLoginDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthFacebookLoginDto
     */
    'role': AuthFacebookLoginDtoRoleEnum;
}

export const AuthFacebookLoginDtoRoleEnum = {
    Admin: 'admin',
    User: 'user'
} as const;

export type AuthFacebookLoginDtoRoleEnum = typeof AuthFacebookLoginDtoRoleEnum[keyof typeof AuthFacebookLoginDtoRoleEnum];

/**
 * 
 * @export
 * @interface AuthForgotPasswordDto
 */
export interface AuthForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthGoogleLoginDto
 */
export interface AuthGoogleLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthGoogleLoginDto
     */
    'idToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthGoogleLoginDto
     */
    'role': AuthGoogleLoginDtoRoleEnum;
}

export const AuthGoogleLoginDtoRoleEnum = {
    Admin: 'admin',
    User: 'user'
} as const;

export type AuthGoogleLoginDtoRoleEnum = typeof AuthGoogleLoginDtoRoleEnum[keyof typeof AuthGoogleLoginDtoRoleEnum];

/**
 * 
 * @export
 * @interface AuthRegisterLoginDto
 */
export interface AuthRegisterLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterLoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterLoginDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterLoginDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterLoginDto
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface AuthResetPasswordDto
 */
export interface AuthResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordDto
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface AuthTwitterLoginDto
 */
export interface AuthTwitterLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthTwitterLoginDto
     */
    'accessTokenKey': string;
    /**
     * 
     * @type {string}
     * @memberof AuthTwitterLoginDto
     */
    'accessTokenSecret': string;
    /**
     * 
     * @type {string}
     * @memberof AuthTwitterLoginDto
     */
    'role': AuthTwitterLoginDtoRoleEnum;
}

export const AuthTwitterLoginDtoRoleEnum = {
    Admin: 'admin',
    User: 'user'
} as const;

export type AuthTwitterLoginDtoRoleEnum = typeof AuthTwitterLoginDtoRoleEnum[keyof typeof AuthTwitterLoginDtoRoleEnum];

/**
 * 
 * @export
 * @interface AuthUpdateDto
 */
export interface AuthUpdateDto {
    /**
     * 
     * @type {FileEntity}
     * @memberof AuthUpdateDto
     */
    'photo': FileEntity;
    /**
     * 
     * @type {string}
     * @memberof AuthUpdateDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthUpdateDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthUpdateDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthUpdateDto
     */
    'oldPassword': string;
    /**
     * 
     * @type {object}
     * @memberof AuthUpdateDto
     */
    'phoneNumber': object;
}
/**
 * 
 * @export
 * @interface BusinessHoursPeriod
 */
export interface BusinessHoursPeriod {
    /**
     * 
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    'id'?: string;
    /**
     * Indicates the specific day  of the week.
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    'dayOfWeek'?: string;
    /**
     * The start time of a business hours period, specified in local time using partial-time. RFC 3339 format. For example, `8:30:00` for a period starting at 8:30 in the morning. Note that the seconds value is always :00, but it is appended for conformance to the RFC.
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    'startLocalTime'?: string;
    /**
     * The end time of a business hours period, specified in local time using partial-time. RFC 3339 format. For example, `21:00:00` for a period ending at 9:00 in the evening. Note that the seconds value is always :00, but it is appended for conformance to the RFC.
     * @type {string}
     * @memberof BusinessHoursPeriod
     */
    'endLocalTime'?: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'moaOrdinal'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    'moaEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Category
     */
    'items'?: Array<Item>;
}
/**
 * 
 * @export
 * @interface CategoryPaginatedResponse
 */
export interface CategoryPaginatedResponse {
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryPaginatedResponse
     */
    'data'?: Array<Category>;
    /**
     * 
     * @type {number}
     * @memberof CategoryPaginatedResponse
     */
    'pages': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryPaginatedResponse
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface CategoryUpdateAllDto
 */
export interface CategoryUpdateAllDto {
    /**
     * 
     * @type {string}
     * @memberof CategoryUpdateAllDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CategoryUpdateAllDto
     */
    'moaOrdinal': number;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryUpdateAllDto
     */
    'moaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface CategoryUpdateDto
 */
export interface CategoryUpdateDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryUpdateDto
     */
    'moaOrdinal': number;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryUpdateDto
     */
    'moaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface ConfigUpdateDto
 */
export interface ConfigUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ConfigUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ConfigUpdateDto
     */
    'seedColor': string;
    /**
     * 
     * @type {string}
     * @memberof ConfigUpdateDto
     */
    'fontFamily': string;
}
/**
 * 
 * @export
 * @interface FileEntity
 */
export interface FileEntity {
    /**
     * 
     * @type {string}
     * @memberof FileEntity
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'moaOrdinal'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Item
     */
    'moaEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ModifierList>}
     * @memberof Item
     */
    'modifierLists'?: Array<ModifierList>;
    /**
     * 
     * @type {Array<Variation>}
     * @memberof Item
     */
    'variations'?: Array<Variation>;
}
/**
 * 
 * @export
 * @interface ItemPaginatedResponse
 */
export interface ItemPaginatedResponse {
    /**
     * 
     * @type {Array<Item>}
     * @memberof ItemPaginatedResponse
     */
    'data'?: Array<Item>;
    /**
     * 
     * @type {number}
     * @memberof ItemPaginatedResponse
     */
    'pages': number;
    /**
     * 
     * @type {number}
     * @memberof ItemPaginatedResponse
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface ItemUpdateAllDto
 */
export interface ItemUpdateAllDto {
    /**
     * 
     * @type {string}
     * @memberof ItemUpdateAllDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ItemUpdateAllDto
     */
    'moaOrdinal': number;
    /**
     * 
     * @type {boolean}
     * @memberof ItemUpdateAllDto
     */
    'moaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface ItemUpdateDto
 */
export interface ItemUpdateDto {
    /**
     * 
     * @type {number}
     * @memberof ItemUpdateDto
     */
    'moaOrdinal': number;
    /**
     * 
     * @type {boolean}
     * @memberof ItemUpdateDto
     */
    'moaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'moaOrdinal'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Location
     */
    'moaEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Location
     */
    'isMain': boolean;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'timezone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'languageCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'businessName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'websiteUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'businessEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'twitterUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'instagramUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'facebookUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'posBackgroundUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'mcc'?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'fullFormatLogoUrl'?: string;
    /**
     * 
     * @type {Array<BusinessHoursPeriod>}
     * @memberof Location
     */
    'businessHours'?: Array<BusinessHoursPeriod>;
    /**
     * 
     * @type {Address}
     * @memberof Location
     */
    'address'?: Address;
}
/**
 * 
 * @export
 * @interface LocationPaginatedResponse
 */
export interface LocationPaginatedResponse {
    /**
     * 
     * @type {Array<Location>}
     * @memberof LocationPaginatedResponse
     */
    'data'?: Array<Location>;
    /**
     * 
     * @type {number}
     * @memberof LocationPaginatedResponse
     */
    'pages': number;
    /**
     * 
     * @type {number}
     * @memberof LocationPaginatedResponse
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface LocationUpdateAllDto
 */
export interface LocationUpdateAllDto {
    /**
     * 
     * @type {string}
     * @memberof LocationUpdateAllDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof LocationUpdateAllDto
     */
    'moaOrdinal': number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationUpdateAllDto
     */
    'moaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface LocationUpdateDto
 */
export interface LocationUpdateDto {
    /**
     * 
     * @type {number}
     * @memberof LocationUpdateDto
     */
    'moaOrdinal': number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationUpdateDto
     */
    'moaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface LoginResponseType
 */
export interface LoginResponseType {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseType
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseType
     */
    'refreshToken': string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponseType
     */
    'tokenExpires': number;
    /**
     * 
     * @type {User}
     * @memberof LoginResponseType
     */
    'user': User;
}
/**
 * 
 * @export
 * @interface Merchant
 */
export interface Merchant {
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    'id'?: string;
    /**
     * 
     * @type {User}
     * @memberof Merchant
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    'squareId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    'stripeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    'stripeCheckoutSessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    'catalogId'?: string;
}
/**
 * 
 * @export
 * @interface Modifier
 */
export interface Modifier {
    /**
     * 
     * @type {string}
     * @memberof Modifier
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Modifier
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Modifier
     */
    'priceInCents'?: number;
    /**
     * 
     * @type {number}
     * @memberof Modifier
     */
    'ordinal'?: number;
}
/**
 * 
 * @export
 * @interface ModifierList
 */
export interface ModifierList {
    /**
     * 
     * @type {string}
     * @memberof ModifierList
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModifierList
     */
    'minSelectedModifiers'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModifierList
     */
    'maxSelectedModifiers'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModifierList
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModifierList
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModifierList
     */
    'selectionType'?: string;
    /**
     * 
     * @type {Array<Modifier>}
     * @memberof ModifierList
     */
    'modifiers'?: Array<Modifier>;
}
/**
 * 
 * @export
 * @interface NestError
 */
export interface NestError {
    /**
     * 
     * @type {number}
     * @memberof NestError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof NestError
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof NestError
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface StripeCheckoutCreateDto
 */
export interface StripeCheckoutCreateDto {
    /**
     * 
     * @type {string}
     * @memberof StripeCheckoutCreateDto
     */
    'successUrl': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCheckoutCreateDto
     */
    'cancelUrl': string;
}
/**
 * 
 * @export
 * @interface StripeCheckoutDto
 */
export interface StripeCheckoutDto {
    /**
     * 
     * @type {string}
     * @memberof StripeCheckoutDto
     */
    'checkoutSessionId': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'socialId': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface Variation
 */
export interface Variation {
    /**
     * 
     * @type {string}
     * @memberof Variation
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Variation
     */
    'ordinal'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Variation
     */
    'moaEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Variation
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Variation
     */
    'priceInCents'?: number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get access token
         * @param {AuthEmailLoginDto} authEmailLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (authEmailLoginDto: AuthEmailLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authEmailLoginDto' is not null or undefined
            assertParamExists('createSession', 'authEmailLoginDto', authEmailLoginDto)
            const localVarPath = `/v2/auth/email/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authEmailLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Auth
         * @param {AuthRegisterLoginDto} authRegisterLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (authRegisterLoginDto: AuthRegisterLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRegisterLoginDto' is not null or undefined
            assertParamExists('createUser', 'authRegisterLoginDto', authRegisterLoginDto)
            const localVarPath = `/v2/auth/email/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRegisterLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current Auth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {AuthForgotPasswordDto} authForgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (authForgotPasswordDto: AuthForgotPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordDto' is not null or undefined
            assertParamExists('forgotPassword', 'authForgotPasswordDto', authForgotPasswordDto)
            const localVarPath = `/v2/auth/forgot/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Apple login
         * @param {AuthAppleLoginDto} authAppleLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApple: async (authAppleLoginDto: AuthAppleLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authAppleLoginDto' is not null or undefined
            assertParamExists('loginApple', 'authAppleLoginDto', authAppleLoginDto)
            const localVarPath = `/v2/auth/apple/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authAppleLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Facebook login
         * @param {AuthFacebookLoginDto} authFacebookLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFacebook: async (authFacebookLoginDto: AuthFacebookLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authFacebookLoginDto' is not null or undefined
            assertParamExists('loginFacebook', 'authFacebookLoginDto', authFacebookLoginDto)
            const localVarPath = `/v2/auth/facebook/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authFacebookLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Google login
         * @param {AuthGoogleLoginDto} authGoogleLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogle: async (authGoogleLoginDto: AuthGoogleLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authGoogleLoginDto' is not null or undefined
            assertParamExists('loginGoogle', 'authGoogleLoginDto', authGoogleLoginDto)
            const localVarPath = `/v2/auth/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authGoogleLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Twitter login
         * @param {AuthTwitterLoginDto} authTwitterLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTwitter: async (authTwitterLoginDto: AuthTwitterLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authTwitterLoginDto' is not null or undefined
            assertParamExists('loginTwitter', 'authTwitterLoginDto', authTwitterLoginDto)
            const localVarPath = `/v2/auth/twitter/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authTwitterLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset password
         * @param {AuthResetPasswordDto} authResetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (authResetPasswordDto: AuthResetPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordDto' is not null or undefined
            assertParamExists('resetPassword', 'authResetPasswordDto', authResetPasswordDto)
            const localVarPath = `/v2/auth/reset/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Auth
         * @param {AuthUpdateDto} authUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentAuth: async (authUpdateDto: AuthUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authUpdateDto' is not null or undefined
            assertParamExists('updateCurrentAuth', 'authUpdateDto', authUpdateDto)
            const localVarPath = `/v2/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get access token
         * @param {AuthEmailLoginDto} authEmailLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(authEmailLoginDto: AuthEmailLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(authEmailLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Auth
         * @param {AuthRegisterLoginDto} authRegisterLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(authRegisterLoginDto: AuthRegisterLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(authRegisterLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current Auth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCurrentAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCurrentAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Forgot password
         * @param {AuthForgotPasswordDto} authForgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(authForgotPasswordDto: AuthForgotPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(authForgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Apple login
         * @param {AuthAppleLoginDto} authAppleLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApple(authAppleLoginDto: AuthAppleLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApple(authAppleLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Facebook login
         * @param {AuthFacebookLoginDto} authFacebookLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginFacebook(authFacebookLoginDto: AuthFacebookLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginFacebook(authFacebookLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Google login
         * @param {AuthGoogleLoginDto} authGoogleLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginGoogle(authGoogleLoginDto: AuthGoogleLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginGoogle(authGoogleLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Twitter login
         * @param {AuthTwitterLoginDto} authTwitterLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginTwitter(authTwitterLoginDto: AuthTwitterLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginTwitter(authTwitterLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset password
         * @param {AuthResetPasswordDto} authResetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(authResetPasswordDto: AuthResetPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(authResetPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Auth
         * @param {AuthUpdateDto} authUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCurrentAuth(authUpdateDto: AuthUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCurrentAuth(authUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Get access token
         * @param {AuthEmailLoginDto} authEmailLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(authEmailLoginDto: AuthEmailLoginDto, options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.createSession(authEmailLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Auth
         * @param {AuthRegisterLoginDto} authRegisterLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(authRegisterLoginDto: AuthRegisterLoginDto, options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.createUser(authRegisterLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current Auth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentAuth(options?: any): AxiosPromise<User> {
            return localVarFp.currentAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentAuth(options?: any): AxiosPromise<void> {
            return localVarFp.deleteCurrentAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forgot password
         * @param {AuthForgotPasswordDto} authForgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(authForgotPasswordDto: AuthForgotPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.forgotPassword(authForgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Apple login
         * @param {AuthAppleLoginDto} authAppleLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApple(authAppleLoginDto: AuthAppleLoginDto, options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.loginApple(authAppleLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Facebook login
         * @param {AuthFacebookLoginDto} authFacebookLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginFacebook(authFacebookLoginDto: AuthFacebookLoginDto, options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.loginFacebook(authFacebookLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Google login
         * @param {AuthGoogleLoginDto} authGoogleLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogle(authGoogleLoginDto: AuthGoogleLoginDto, options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.loginGoogle(authGoogleLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Twitter login
         * @param {AuthTwitterLoginDto} authTwitterLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTwitter(authTwitterLoginDto: AuthTwitterLoginDto, options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.loginTwitter(authTwitterLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(options?: any): AxiosPromise<LoginResponseType> {
            return localVarFp.refreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset password
         * @param {AuthResetPasswordDto} authResetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(authResetPasswordDto: AuthResetPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.resetPassword(authResetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Auth
         * @param {AuthUpdateDto} authUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentAuth(authUpdateDto: AuthUpdateDto, options?: any): AxiosPromise<User> {
            return localVarFp.updateCurrentAuth(authUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSession operation in AuthApi.
 * @export
 * @interface AuthApiCreateSessionRequest
 */
export interface AuthApiCreateSessionRequest {
    /**
     * 
     * @type {AuthEmailLoginDto}
     * @memberof AuthApiCreateSession
     */
    readonly authEmailLoginDto: AuthEmailLoginDto
}

/**
 * Request parameters for createUser operation in AuthApi.
 * @export
 * @interface AuthApiCreateUserRequest
 */
export interface AuthApiCreateUserRequest {
    /**
     * 
     * @type {AuthRegisterLoginDto}
     * @memberof AuthApiCreateUser
     */
    readonly authRegisterLoginDto: AuthRegisterLoginDto
}

/**
 * Request parameters for forgotPassword operation in AuthApi.
 * @export
 * @interface AuthApiForgotPasswordRequest
 */
export interface AuthApiForgotPasswordRequest {
    /**
     * 
     * @type {AuthForgotPasswordDto}
     * @memberof AuthApiForgotPassword
     */
    readonly authForgotPasswordDto: AuthForgotPasswordDto
}

/**
 * Request parameters for loginApple operation in AuthApi.
 * @export
 * @interface AuthApiLoginAppleRequest
 */
export interface AuthApiLoginAppleRequest {
    /**
     * 
     * @type {AuthAppleLoginDto}
     * @memberof AuthApiLoginApple
     */
    readonly authAppleLoginDto: AuthAppleLoginDto
}

/**
 * Request parameters for loginFacebook operation in AuthApi.
 * @export
 * @interface AuthApiLoginFacebookRequest
 */
export interface AuthApiLoginFacebookRequest {
    /**
     * 
     * @type {AuthFacebookLoginDto}
     * @memberof AuthApiLoginFacebook
     */
    readonly authFacebookLoginDto: AuthFacebookLoginDto
}

/**
 * Request parameters for loginGoogle operation in AuthApi.
 * @export
 * @interface AuthApiLoginGoogleRequest
 */
export interface AuthApiLoginGoogleRequest {
    /**
     * 
     * @type {AuthGoogleLoginDto}
     * @memberof AuthApiLoginGoogle
     */
    readonly authGoogleLoginDto: AuthGoogleLoginDto
}

/**
 * Request parameters for loginTwitter operation in AuthApi.
 * @export
 * @interface AuthApiLoginTwitterRequest
 */
export interface AuthApiLoginTwitterRequest {
    /**
     * 
     * @type {AuthTwitterLoginDto}
     * @memberof AuthApiLoginTwitter
     */
    readonly authTwitterLoginDto: AuthTwitterLoginDto
}

/**
 * Request parameters for resetPassword operation in AuthApi.
 * @export
 * @interface AuthApiResetPasswordRequest
 */
export interface AuthApiResetPasswordRequest {
    /**
     * 
     * @type {AuthResetPasswordDto}
     * @memberof AuthApiResetPassword
     */
    readonly authResetPasswordDto: AuthResetPasswordDto
}

/**
 * Request parameters for updateCurrentAuth operation in AuthApi.
 * @export
 * @interface AuthApiUpdateCurrentAuthRequest
 */
export interface AuthApiUpdateCurrentAuthRequest {
    /**
     * 
     * @type {AuthUpdateDto}
     * @memberof AuthApiUpdateCurrentAuth
     */
    readonly authUpdateDto: AuthUpdateDto
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Get access token
     * @param {AuthApiCreateSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createSession(requestParameters: AuthApiCreateSessionRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).createSession(requestParameters.authEmailLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Auth
     * @param {AuthApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createUser(requestParameters: AuthApiCreateUserRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).createUser(requestParameters.authRegisterLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current Auth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public currentAuth(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).currentAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public deleteCurrentAuth(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).deleteCurrentAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forgot password
     * @param {AuthApiForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgotPassword(requestParameters: AuthApiForgotPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPassword(requestParameters.authForgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Apple login
     * @param {AuthApiLoginAppleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginApple(requestParameters: AuthApiLoginAppleRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginApple(requestParameters.authAppleLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Facebook login
     * @param {AuthApiLoginFacebookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginFacebook(requestParameters: AuthApiLoginFacebookRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginFacebook(requestParameters.authFacebookLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Google login
     * @param {AuthApiLoginGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginGoogle(requestParameters: AuthApiLoginGoogleRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginGoogle(requestParameters.authGoogleLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Twitter login
     * @param {AuthApiLoginTwitterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginTwitter(requestParameters: AuthApiLoginTwitterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginTwitter(requestParameters.authTwitterLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset password
     * @param {AuthApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resetPassword(requestParameters: AuthApiResetPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPassword(requestParameters.authResetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Auth
     * @param {AuthApiUpdateCurrentAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public updateCurrentAuth(requestParameters: AuthApiUpdateCurrentAuthRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).updateCurrentAuth(requestParameters.authUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CatalogsApi - axios parameter creator
 * @export
 */
export const CatalogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get your Categories with Items, Variations, and ModifierLists
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalog: async (page?: number, limit?: number, locationId?: string, items?: boolean, variations?: boolean, modifierLists?: boolean, actingAs?: 'merchant' | 'customer', merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/catalog/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (items !== undefined) {
                localVarQueryParameter['items'] = items;
            }

            if (variations !== undefined) {
                localVarQueryParameter['variations'] = variations;
            }

            if (modifierLists !== undefined) {
                localVarQueryParameter['modifierLists'] = modifierLists;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Item with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: async (id: string, locationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItem', 'id', id)
            const localVarPath = `/v2/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Items in Category
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (id: string, page?: number, limit?: number, locationId?: string, actingAs?: 'merchant' | 'customer', merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItems', 'id', id)
            const localVarPath = `/v2/categories/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple Categories
         * @param {Array<CategoryUpdateAllDto>} categoryUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategories: async (categoryUpdateAllDto: Array<CategoryUpdateAllDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryUpdateAllDto' is not null or undefined
            assertParamExists('updateCategories', 'categoryUpdateAllDto', categoryUpdateAllDto)
            const localVarPath = `/v2/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryUpdateAllDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} id 
         * @param {CategoryUpdateDto} categoryUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (id: string, categoryUpdateDto: CategoryUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategory', 'id', id)
            // verify required parameter 'categoryUpdateDto' is not null or undefined
            assertParamExists('updateCategory', 'categoryUpdateDto', categoryUpdateDto)
            const localVarPath = `/v2/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Item
         * @param {string} id 
         * @param {ItemUpdateDto} itemUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: async (id: string, itemUpdateDto: ItemUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateItem', 'id', id)
            // verify required parameter 'itemUpdateDto' is not null or undefined
            assertParamExists('updateItem', 'itemUpdateDto', itemUpdateDto)
            const localVarPath = `/v2/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple Items
         * @param {Array<ItemUpdateAllDto>} itemUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: async (itemUpdateAllDto: Array<ItemUpdateAllDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemUpdateAllDto' is not null or undefined
            assertParamExists('updateItems', 'itemUpdateAllDto', itemUpdateAllDto)
            const localVarPath = `/v2/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemUpdateAllDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogsApi - functional programming interface
 * @export
 */
export const CatalogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get your Categories with Items, Variations, and ModifierLists
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalog(page?: number, limit?: number, locationId?: string, items?: boolean, variations?: boolean, modifierLists?: boolean, actingAs?: 'merchant' | 'customer', merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalog(page, limit, locationId, items, variations, modifierLists, actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Item with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(id: string, locationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(id, locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Items in Category
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(id: string, page?: number, limit?: number, locationId?: string, actingAs?: 'merchant' | 'customer', merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(id, page, limit, locationId, actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple Categories
         * @param {Array<CategoryUpdateAllDto>} categoryUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategories(categoryUpdateAllDto: Array<CategoryUpdateAllDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategories(categoryUpdateAllDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} id 
         * @param {CategoryUpdateDto} categoryUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(id: string, categoryUpdateDto: CategoryUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, categoryUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an Item
         * @param {string} id 
         * @param {ItemUpdateDto} itemUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItem(id: string, itemUpdateDto: ItemUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItem(id, itemUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple Items
         * @param {Array<ItemUpdateAllDto>} itemUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItems(itemUpdateAllDto: Array<ItemUpdateAllDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItems(itemUpdateAllDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogsApi - factory interface
 * @export
 */
export const CatalogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get your Categories with Items, Variations, and ModifierLists
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {boolean} [items] 
         * @param {boolean} [variations] 
         * @param {boolean} [modifierLists] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalog(page?: number, limit?: number, locationId?: string, items?: boolean, variations?: boolean, modifierLists?: boolean, actingAs?: 'merchant' | 'customer', merchantId?: string, options?: any): AxiosPromise<CategoryPaginatedResponse> {
            return localVarFp.getCatalog(page, limit, locationId, items, variations, modifierLists, actingAs, merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Item with ID
         * @param {string} id 
         * @param {string} [locationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(id: string, locationId?: string, options?: any): AxiosPromise<Item> {
            return localVarFp.getItem(id, locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Items in Category
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [locationId] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(id: string, page?: number, limit?: number, locationId?: string, actingAs?: 'merchant' | 'customer', merchantId?: string, options?: any): AxiosPromise<ItemPaginatedResponse> {
            return localVarFp.getItems(id, page, limit, locationId, actingAs, merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple Categories
         * @param {Array<CategoryUpdateAllDto>} categoryUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategories(categoryUpdateAllDto: Array<CategoryUpdateAllDto>, options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.updateCategories(categoryUpdateAllDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Category
         * @param {string} id 
         * @param {CategoryUpdateDto} categoryUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: string, categoryUpdateDto: CategoryUpdateDto, options?: any): AxiosPromise<Category> {
            return localVarFp.updateCategory(id, categoryUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an Item
         * @param {string} id 
         * @param {ItemUpdateDto} itemUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem(id: string, itemUpdateDto: ItemUpdateDto, options?: any): AxiosPromise<Item> {
            return localVarFp.updateItem(id, itemUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple Items
         * @param {Array<ItemUpdateAllDto>} itemUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems(itemUpdateAllDto: Array<ItemUpdateAllDto>, options?: any): AxiosPromise<Array<Item>> {
            return localVarFp.updateItems(itemUpdateAllDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCatalog operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetCatalogRequest
 */
export interface CatalogsApiGetCatalogRequest {
    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCatalog
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetCatalog
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCatalog
     */
    readonly locationId?: string

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCatalog
     */
    readonly items?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCatalog
     */
    readonly variations?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CatalogsApiGetCatalog
     */
    readonly modifierLists?: boolean

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof CatalogsApiGetCatalog
     */
    readonly actingAs?: 'merchant' | 'customer'

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetCatalog
     */
    readonly merchantId?: string
}

/**
 * Request parameters for getItem operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetItemRequest
 */
export interface CatalogsApiGetItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItem
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItem
     */
    readonly locationId?: string
}

/**
 * Request parameters for getItems operation in CatalogsApi.
 * @export
 * @interface CatalogsApiGetItemsRequest
 */
export interface CatalogsApiGetItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItems
     */
    readonly id: string

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetItems
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CatalogsApiGetItems
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItems
     */
    readonly locationId?: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof CatalogsApiGetItems
     */
    readonly actingAs?: 'merchant' | 'customer'

    /**
     * 
     * @type {string}
     * @memberof CatalogsApiGetItems
     */
    readonly merchantId?: string
}

/**
 * Request parameters for updateCategories operation in CatalogsApi.
 * @export
 * @interface CatalogsApiUpdateCategoriesRequest
 */
export interface CatalogsApiUpdateCategoriesRequest {
    /**
     * 
     * @type {Array<CategoryUpdateAllDto>}
     * @memberof CatalogsApiUpdateCategories
     */
    readonly categoryUpdateAllDto: Array<CategoryUpdateAllDto>
}

/**
 * Request parameters for updateCategory operation in CatalogsApi.
 * @export
 * @interface CatalogsApiUpdateCategoryRequest
 */
export interface CatalogsApiUpdateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiUpdateCategory
     */
    readonly id: string

    /**
     * 
     * @type {CategoryUpdateDto}
     * @memberof CatalogsApiUpdateCategory
     */
    readonly categoryUpdateDto: CategoryUpdateDto
}

/**
 * Request parameters for updateItem operation in CatalogsApi.
 * @export
 * @interface CatalogsApiUpdateItemRequest
 */
export interface CatalogsApiUpdateItemRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogsApiUpdateItem
     */
    readonly id: string

    /**
     * 
     * @type {ItemUpdateDto}
     * @memberof CatalogsApiUpdateItem
     */
    readonly itemUpdateDto: ItemUpdateDto
}

/**
 * Request parameters for updateItems operation in CatalogsApi.
 * @export
 * @interface CatalogsApiUpdateItemsRequest
 */
export interface CatalogsApiUpdateItemsRequest {
    /**
     * 
     * @type {Array<ItemUpdateAllDto>}
     * @memberof CatalogsApiUpdateItems
     */
    readonly itemUpdateAllDto: Array<ItemUpdateAllDto>
}

/**
 * CatalogsApi - object-oriented interface
 * @export
 * @class CatalogsApi
 * @extends {BaseAPI}
 */
export class CatalogsApi extends BaseAPI {
    /**
     * 
     * @summary Get your Categories with Items, Variations, and ModifierLists
     * @param {CatalogsApiGetCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getCatalog(requestParameters: CatalogsApiGetCatalogRequest = {}, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getCatalog(requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.items, requestParameters.variations, requestParameters.modifierLists, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Item with ID
     * @param {CatalogsApiGetItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getItem(requestParameters: CatalogsApiGetItemRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getItem(requestParameters.id, requestParameters.locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Items in Category
     * @param {CatalogsApiGetItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public getItems(requestParameters: CatalogsApiGetItemsRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).getItems(requestParameters.id, requestParameters.page, requestParameters.limit, requestParameters.locationId, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple Categories
     * @param {CatalogsApiUpdateCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public updateCategories(requestParameters: CatalogsApiUpdateCategoriesRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).updateCategories(requestParameters.categoryUpdateAllDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Category
     * @param {CatalogsApiUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public updateCategory(requestParameters: CatalogsApiUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).updateCategory(requestParameters.id, requestParameters.categoryUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an Item
     * @param {CatalogsApiUpdateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public updateItem(requestParameters: CatalogsApiUpdateItemRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).updateItem(requestParameters.id, requestParameters.itemUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple Items
     * @param {CatalogsApiUpdateItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public updateItems(requestParameters: CatalogsApiUpdateItemsRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).updateItems(requestParameters.itemUpdateAllDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigsApi - axios parameter creator
 * @export
 */
export const ConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create your Config
         * @param {ConfigUpdateDto} configUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfig: async (configUpdateDto: ConfigUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configUpdateDto' is not null or undefined
            assertParamExists('createConfig', 'configUpdateDto', configUpdateDto)
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get your Config
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (actingAs?: 'merchant' | 'customer', merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update your Config
         * @param {ConfigUpdateDto} configUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfig: async (configUpdateDto: ConfigUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configUpdateDto' is not null or undefined
            assertParamExists('updateConfig', 'configUpdateDto', configUpdateDto)
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload icon
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadIcon: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me/icon/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigsApi - functional programming interface
 * @export
 */
export const ConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create your Config
         * @param {ConfigUpdateDto} configUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConfig(configUpdateDto: ConfigUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConfig(configUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get your Config
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(actingAs?: 'merchant' | 'customer', merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update your Config
         * @param {ConfigUpdateDto} configUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfig(configUpdateDto: ConfigUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfig(configUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload icon
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadIcon(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadIcon(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigsApi - factory interface
 * @export
 */
export const ConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create your Config
         * @param {ConfigUpdateDto} configUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfig(configUpdateDto: ConfigUpdateDto, options?: any): AxiosPromise<AppConfig> {
            return localVarFp.createConfig(configUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get your Config
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(actingAs?: 'merchant' | 'customer', merchantId?: string, options?: any): AxiosPromise<AppConfig> {
            return localVarFp.getConfig(actingAs, merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update your Config
         * @param {ConfigUpdateDto} configUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfig(configUpdateDto: ConfigUpdateDto, options?: any): AxiosPromise<AppConfig> {
            return localVarFp.updateConfig(configUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload icon
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadIcon(file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.uploadIcon(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConfig operation in ConfigsApi.
 * @export
 * @interface ConfigsApiCreateConfigRequest
 */
export interface ConfigsApiCreateConfigRequest {
    /**
     * 
     * @type {ConfigUpdateDto}
     * @memberof ConfigsApiCreateConfig
     */
    readonly configUpdateDto: ConfigUpdateDto
}

/**
 * Request parameters for getConfig operation in ConfigsApi.
 * @export
 * @interface ConfigsApiGetConfigRequest
 */
export interface ConfigsApiGetConfigRequest {
    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof ConfigsApiGetConfig
     */
    readonly actingAs?: 'merchant' | 'customer'

    /**
     * 
     * @type {string}
     * @memberof ConfigsApiGetConfig
     */
    readonly merchantId?: string
}

/**
 * Request parameters for updateConfig operation in ConfigsApi.
 * @export
 * @interface ConfigsApiUpdateConfigRequest
 */
export interface ConfigsApiUpdateConfigRequest {
    /**
     * 
     * @type {ConfigUpdateDto}
     * @memberof ConfigsApiUpdateConfig
     */
    readonly configUpdateDto: ConfigUpdateDto
}

/**
 * Request parameters for uploadIcon operation in ConfigsApi.
 * @export
 * @interface ConfigsApiUploadIconRequest
 */
export interface ConfigsApiUploadIconRequest {
    /**
     * 
     * @type {File}
     * @memberof ConfigsApiUploadIcon
     */
    readonly file?: File
}

/**
 * ConfigsApi - object-oriented interface
 * @export
 * @class ConfigsApi
 * @extends {BaseAPI}
 */
export class ConfigsApi extends BaseAPI {
    /**
     * 
     * @summary Create your Config
     * @param {ConfigsApiCreateConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public createConfig(requestParameters: ConfigsApiCreateConfigRequest, options?: AxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).createConfig(requestParameters.configUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get your Config
     * @param {ConfigsApiGetConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public getConfig(requestParameters: ConfigsApiGetConfigRequest = {}, options?: AxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).getConfig(requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update your Config
     * @param {ConfigsApiUpdateConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public updateConfig(requestParameters: ConfigsApiUpdateConfigRequest, options?: AxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).updateConfig(requestParameters.configUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload icon
     * @param {ConfigsApiUploadIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public uploadIcon(requestParameters: ConfigsApiUploadIconRequest = {}, options?: AxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).uploadIcon(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Location with ID
         * @param {string} id 
         * @param {'merchant' | 'customer'} actingAs 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (id: string, actingAs: 'merchant' | 'customer', merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLocation', 'id', id)
            // verify required parameter 'actingAs' is not null or undefined
            assertParamExists('getLocation', 'actingAs', actingAs)
            const localVarPath = `/v2/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all your Locations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: async (page?: number, limit?: number, actingAs?: 'merchant' | 'customer', merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Location
         * @param {string} id 
         * @param {LocationUpdateDto} locationUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (id: string, locationUpdateDto: LocationUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateLocation', 'id', id)
            // verify required parameter 'locationUpdateDto' is not null or undefined
            assertParamExists('updateLocation', 'locationUpdateDto', locationUpdateDto)
            const localVarPath = `/v2/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Locations
         * @param {Array<LocationUpdateAllDto>} locationUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocations: async (locationUpdateAllDto: Array<LocationUpdateAllDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationUpdateAllDto' is not null or undefined
            assertParamExists('updateLocations', 'locationUpdateAllDto', locationUpdateAllDto)
            const localVarPath = `/v2/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationUpdateAllDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Location with ID
         * @param {string} id 
         * @param {'merchant' | 'customer'} actingAs 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(id: string, actingAs: 'merchant' | 'customer', merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(id, actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all your Locations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocations(page?: number, limit?: number, actingAs?: 'merchant' | 'customer', merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocations(page, limit, actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Location
         * @param {string} id 
         * @param {LocationUpdateDto} locationUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(id: string, locationUpdateDto: LocationUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(id, locationUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Locations
         * @param {Array<LocationUpdateAllDto>} locationUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocations(locationUpdateAllDto: Array<LocationUpdateAllDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocations(locationUpdateAllDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Location with ID
         * @param {string} id 
         * @param {'merchant' | 'customer'} actingAs 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(id: string, actingAs: 'merchant' | 'customer', merchantId?: string, options?: any): AxiosPromise<Location> {
            return localVarFp.getLocation(id, actingAs, merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all your Locations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {'merchant' | 'customer'} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations(page?: number, limit?: number, actingAs?: 'merchant' | 'customer', merchantId?: string, options?: any): AxiosPromise<LocationPaginatedResponse> {
            return localVarFp.getLocations(page, limit, actingAs, merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Location
         * @param {string} id 
         * @param {LocationUpdateDto} locationUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(id: string, locationUpdateDto: LocationUpdateDto, options?: any): AxiosPromise<Location> {
            return localVarFp.updateLocation(id, locationUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Locations
         * @param {Array<LocationUpdateAllDto>} locationUpdateAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocations(locationUpdateAllDto: Array<LocationUpdateAllDto>, options?: any): AxiosPromise<Array<Location>> {
            return localVarFp.updateLocations(locationUpdateAllDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiGetLocationRequest
 */
export interface LocationsApiGetLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationsApiGetLocation
     */
    readonly id: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof LocationsApiGetLocation
     */
    readonly actingAs: 'merchant' | 'customer'

    /**
     * 
     * @type {string}
     * @memberof LocationsApiGetLocation
     */
    readonly merchantId?: string
}

/**
 * Request parameters for getLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiGetLocationsRequest
 */
export interface LocationsApiGetLocationsRequest {
    /**
     * 
     * @type {number}
     * @memberof LocationsApiGetLocations
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocationsApiGetLocations
     */
    readonly limit?: number

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof LocationsApiGetLocations
     */
    readonly actingAs?: 'merchant' | 'customer'

    /**
     * 
     * @type {string}
     * @memberof LocationsApiGetLocations
     */
    readonly merchantId?: string
}

/**
 * Request parameters for updateLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiUpdateLocationRequest
 */
export interface LocationsApiUpdateLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationsApiUpdateLocation
     */
    readonly id: string

    /**
     * 
     * @type {LocationUpdateDto}
     * @memberof LocationsApiUpdateLocation
     */
    readonly locationUpdateDto: LocationUpdateDto
}

/**
 * Request parameters for updateLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiUpdateLocationsRequest
 */
export interface LocationsApiUpdateLocationsRequest {
    /**
     * 
     * @type {Array<LocationUpdateAllDto>}
     * @memberof LocationsApiUpdateLocations
     */
    readonly locationUpdateAllDto: Array<LocationUpdateAllDto>
}

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI {
    /**
     * 
     * @summary Get a Location with ID
     * @param {LocationsApiGetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public getLocation(requestParameters: LocationsApiGetLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getLocation(requestParameters.id, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all your Locations
     * @param {LocationsApiGetLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public getLocations(requestParameters: LocationsApiGetLocationsRequest = {}, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getLocations(requestParameters.page, requestParameters.limit, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Location
     * @param {LocationsApiUpdateLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public updateLocation(requestParameters: LocationsApiUpdateLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).updateLocation(requestParameters.id, requestParameters.locationUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Locations
     * @param {LocationsApiUpdateLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public updateLocations(requestParameters: LocationsApiUpdateLocationsRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).updateLocations(requestParameters.locationUpdateAllDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {string} oauthAccessCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSquareOauth: async (oauthAccessCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthAccessCode' is not null or undefined
            assertParamExists('confirmSquareOauth', 'oauthAccessCode', oauthAccessCode)
            const localVarPath = `/v2/merchants/me/square/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oauthAccessCode !== undefined) {
                localVarQueryParameter['oauthAccessCode'] = oauthAccessCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm Square checkout
         * @param {StripeCheckoutDto} stripeCheckoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmStripeCheckout: async (stripeCheckoutDto: StripeCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeCheckoutDto' is not null or undefined
            assertParamExists('confirmStripeCheckout', 'stripeCheckoutDto', stripeCheckoutDto)
            const localVarPath = `/v2/merchants/me/stripe/checkout/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stripeCheckoutDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentMerchant: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startStripeCheckout: async (stripeCheckoutCreateDto: StripeCheckoutCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeCheckoutCreateDto' is not null or undefined
            assertParamExists('startStripeCheckout', 'stripeCheckoutCreateDto', stripeCheckoutCreateDto)
            const localVarPath = `/v2/merchants/me/stripe/checkout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stripeCheckoutCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareCatalog: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me/square/catalog/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync your Square Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareLocations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me/square/locations/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantsApi - functional programming interface
 * @export
 */
export const MerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {string} oauthAccessCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmSquareOauth(oauthAccessCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmSquareOauth(oauthAccessCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm Square checkout
         * @param {StripeCheckoutDto} stripeCheckoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmStripeCheckout(stripeCheckoutDto: StripeCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmStripeCheckout(stripeCheckoutDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMerchant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMerchant(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentMerchant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentMerchant(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startStripeCheckout(stripeCheckoutCreateDto: StripeCheckoutCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCheckoutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startStripeCheckout(stripeCheckoutCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncSquareCatalog(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncSquareCatalog(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync your Square Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncSquareLocations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncSquareLocations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantsApi - factory interface
 * @export
 */
export const MerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {string} oauthAccessCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSquareOauth(oauthAccessCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.confirmSquareOauth(oauthAccessCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm Square checkout
         * @param {StripeCheckoutDto} stripeCheckoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmStripeCheckout(stripeCheckoutDto: StripeCheckoutDto, options?: any): AxiosPromise<Merchant> {
            return localVarFp.confirmStripeCheckout(stripeCheckoutDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant(options?: any): AxiosPromise<void> {
            return localVarFp.createMerchant(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentMerchant(options?: any): AxiosPromise<Merchant> {
            return localVarFp.getCurrentMerchant(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startStripeCheckout(stripeCheckoutCreateDto: StripeCheckoutCreateDto, options?: any): AxiosPromise<StripeCheckoutDto> {
            return localVarFp.startStripeCheckout(stripeCheckoutCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareCatalog(options?: any): AxiosPromise<void> {
            return localVarFp.syncSquareCatalog(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync your Square Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareLocations(options?: any): AxiosPromise<void> {
            return localVarFp.syncSquareLocations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for confirmSquareOauth operation in MerchantsApi.
 * @export
 * @interface MerchantsApiConfirmSquareOauthRequest
 */
export interface MerchantsApiConfirmSquareOauthRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantsApiConfirmSquareOauth
     */
    readonly oauthAccessCode: string
}

/**
 * Request parameters for confirmStripeCheckout operation in MerchantsApi.
 * @export
 * @interface MerchantsApiConfirmStripeCheckoutRequest
 */
export interface MerchantsApiConfirmStripeCheckoutRequest {
    /**
     * 
     * @type {StripeCheckoutDto}
     * @memberof MerchantsApiConfirmStripeCheckout
     */
    readonly stripeCheckoutDto: StripeCheckoutDto
}

/**
 * Request parameters for startStripeCheckout operation in MerchantsApi.
 * @export
 * @interface MerchantsApiStartStripeCheckoutRequest
 */
export interface MerchantsApiStartStripeCheckoutRequest {
    /**
     * 
     * @type {StripeCheckoutCreateDto}
     * @memberof MerchantsApiStartStripeCheckout
     */
    readonly stripeCheckoutCreateDto: StripeCheckoutCreateDto
}

/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export class MerchantsApi extends BaseAPI {
    /**
     * 
     * @summary Confirm Square Oauth
     * @param {MerchantsApiConfirmSquareOauthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public confirmSquareOauth(requestParameters: MerchantsApiConfirmSquareOauthRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).confirmSquareOauth(requestParameters.oauthAccessCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm Square checkout
     * @param {MerchantsApiConfirmStripeCheckoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public confirmStripeCheckout(requestParameters: MerchantsApiConfirmStripeCheckoutRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).confirmStripeCheckout(requestParameters.stripeCheckoutDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Merchant for current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public createMerchant(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).createMerchant(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current Merchant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public getCurrentMerchant(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getCurrentMerchant(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Stripe checkout
     * @param {MerchantsApiStartStripeCheckoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public startStripeCheckout(requestParameters: MerchantsApiStartStripeCheckoutRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).startStripeCheckout(requestParameters.stripeCheckoutCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync your Square Catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public syncSquareCatalog(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).syncSquareCatalog(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync your Square Locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public syncSquareLocations(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).syncSquareLocations(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SquareApi - axios parameter creator
 * @export
 */
export const SquareApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} idempotencyKey 
         * @param {string} [objectId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        squareControllerUploadFile: async (idempotencyKey: string, objectId?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('squareControllerUploadFile', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/v2/square/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (idempotencyKey !== undefined) {
                localVarQueryParameter['idempotencyKey'] = idempotencyKey;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['objectId'] = objectId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SquareApi - functional programming interface
 * @export
 */
export const SquareApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SquareApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} idempotencyKey 
         * @param {string} [objectId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async squareControllerUploadFile(idempotencyKey: string, objectId?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.squareControllerUploadFile(idempotencyKey, objectId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SquareApi - factory interface
 * @export
 */
export const SquareApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SquareApiFp(configuration)
    return {
        /**
         * 
         * @param {string} idempotencyKey 
         * @param {string} [objectId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        squareControllerUploadFile(idempotencyKey: string, objectId?: string, file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.squareControllerUploadFile(idempotencyKey, objectId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for squareControllerUploadFile operation in SquareApi.
 * @export
 * @interface SquareApiSquareControllerUploadFileRequest
 */
export interface SquareApiSquareControllerUploadFileRequest {
    /**
     * 
     * @type {string}
     * @memberof SquareApiSquareControllerUploadFile
     */
    readonly idempotencyKey: string

    /**
     * 
     * @type {string}
     * @memberof SquareApiSquareControllerUploadFile
     */
    readonly objectId?: string

    /**
     * 
     * @type {File}
     * @memberof SquareApiSquareControllerUploadFile
     */
    readonly file?: File
}

/**
 * SquareApi - object-oriented interface
 * @export
 * @class SquareApi
 * @extends {BaseAPI}
 */
export class SquareApi extends BaseAPI {
    /**
     * 
     * @param {SquareApiSquareControllerUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SquareApi
     */
    public squareControllerUploadFile(requestParameters: SquareApiSquareControllerUploadFileRequest, options?: AxiosRequestConfig) {
        return SquareApiFp(this.configuration).squareControllerUploadFile(requestParameters.idempotencyKey, requestParameters.objectId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}


