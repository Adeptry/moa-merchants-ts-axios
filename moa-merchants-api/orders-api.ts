/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NestError } from '../moa-merchants-models';
// @ts-ignore
import { Order } from '../moa-merchants-models';
// @ts-ignore
import { OrderCreateDto } from '../moa-merchants-models';
// @ts-ignore
import { OrderPatchDto } from '../moa-merchants-models';
// @ts-ignore
import { OrderPostDto } from '../moa-merchants-models';
// @ts-ignore
import { OrdersPaginatedReponse } from '../moa-merchants-models';
// @ts-ignore
import { PaymentCreateDto } from '../moa-merchants-models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Order
         * @param {string} merchantId 
         * @param {OrderCreateDto} orderCreateDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCurrentOrder: async (merchantId: string, orderCreateDto: OrderCreateDto, lineItems?: boolean, location?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('createCurrentOrder', 'merchantId', merchantId)
            // verify required parameter 'orderCreateDto' is not null or undefined
            assertParamExists('createCurrentOrder', 'orderCreateDto', orderCreateDto)
            const localVarPath = `/v2/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Line Items from Order
         * @param {string} id 
         * @param {string} merchantId 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentLineItem: async (id: string, merchantId: string, lineItems?: boolean, location?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCurrentLineItem', 'id', id)
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('deleteCurrentLineItem', 'merchantId', merchantId)
            const localVarPath = `/v2/orders/current/line-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Order
         * @param {string} merchantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentOrder: async (merchantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('deleteCurrentOrder', 'merchantId', merchantId)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current Order
         * @param {string} merchantId 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentOrder: async (merchantId: string, lineItems?: boolean, location?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('getCurrentOrder', 'merchantId', merchantId)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Order
         * @param {string} id 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {GetOrderActingAsEnum} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: string, lineItems?: boolean, location?: boolean, actingAs?: GetOrderActingAsEnum, merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/v2/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my Orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [closed] 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {GetOrdersActingAsEnum} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (page?: number, limit?: number, closed?: boolean, lineItems?: boolean, location?: boolean, actingAs?: GetOrdersActingAsEnum, merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/orders/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (closed !== undefined) {
                localVarQueryParameter['closed'] = closed;
            }

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch update Order, e.g. modify Location
         * @param {OrderPatchDto} orderPatchDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUpdateCurrentOrder: async (orderPatchDto: OrderPatchDto, lineItems?: boolean, location?: boolean, idempotencyKey?: string, merchantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderPatchDto' is not null or undefined
            assertParamExists('patchUpdateCurrentOrder', 'orderPatchDto', orderPatchDto)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (idempotencyKey !== undefined) {
                localVarQueryParameter['idempotencyKey'] = idempotencyKey;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderPatchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pay for Order
         * @param {string} merchantId 
         * @param {PaymentCreateDto} paymentCreateDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentForCurrentOrder: async (merchantId: string, paymentCreateDto: PaymentCreateDto, lineItems?: boolean, location?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('postPaymentForCurrentOrder', 'merchantId', merchantId)
            // verify required parameter 'paymentCreateDto' is not null or undefined
            assertParamExists('postPaymentForCurrentOrder', 'paymentCreateDto', paymentCreateDto)
            const localVarPath = `/v2/orders/current/payment/square`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
         * @param {string} merchantId 
         * @param {OrderPostDto} orderPostDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdateCurrentOrder: async (merchantId: string, orderPostDto: OrderPostDto, lineItems?: boolean, location?: boolean, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('postUpdateCurrentOrder', 'merchantId', merchantId)
            // verify required parameter 'orderPostDto' is not null or undefined
            assertParamExists('postUpdateCurrentOrder', 'orderPostDto', orderPostDto)
            const localVarPath = `/v2/orders/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (lineItems !== undefined) {
                localVarQueryParameter['lineItems'] = lineItems;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (idempotencyKey !== undefined) {
                localVarQueryParameter['idempotencyKey'] = idempotencyKey;
            }

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderPostDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Order
         * @param {string} merchantId 
         * @param {OrderCreateDto} orderCreateDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCurrentOrder(merchantId: string, orderCreateDto: OrderCreateDto, lineItems?: boolean, location?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCurrentOrder(merchantId, orderCreateDto, lineItems, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove Line Items from Order
         * @param {string} id 
         * @param {string} merchantId 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCurrentLineItem(id: string, merchantId: string, lineItems?: boolean, location?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCurrentLineItem(id, merchantId, lineItems, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Order
         * @param {string} merchantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCurrentOrder(merchantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCurrentOrder(merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current Order
         * @param {string} merchantId 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentOrder(merchantId: string, lineItems?: boolean, location?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentOrder(merchantId, lineItems, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Order
         * @param {string} id 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {GetOrderActingAsEnum} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: string, lineItems?: boolean, location?: boolean, actingAs?: GetOrderActingAsEnum, merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, lineItems, location, actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get my Orders
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [closed] 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {GetOrdersActingAsEnum} [actingAs] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(page?: number, limit?: number, closed?: boolean, lineItems?: boolean, location?: boolean, actingAs?: GetOrdersActingAsEnum, merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersPaginatedReponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(page, limit, closed, lineItems, location, actingAs, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Patch update Order, e.g. modify Location
         * @param {OrderPatchDto} orderPatchDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {string} [merchantId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUpdateCurrentOrder(orderPatchDto: OrderPatchDto, lineItems?: boolean, location?: boolean, idempotencyKey?: string, merchantId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUpdateCurrentOrder(orderPatchDto, lineItems, location, idempotencyKey, merchantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pay for Order
         * @param {string} merchantId 
         * @param {PaymentCreateDto} paymentCreateDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentForCurrentOrder(merchantId: string, paymentCreateDto: PaymentCreateDto, lineItems?: boolean, location?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentForCurrentOrder(merchantId, paymentCreateDto, lineItems, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
         * @param {string} merchantId 
         * @param {OrderPostDto} orderPostDto 
         * @param {boolean} [lineItems] 
         * @param {boolean} [location] 
         * @param {string} [idempotencyKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUpdateCurrentOrder(merchantId: string, orderPostDto: OrderPostDto, lineItems?: boolean, location?: boolean, idempotencyKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUpdateCurrentOrder(merchantId, orderPostDto, lineItems, location, idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Order
         * @param {OrdersApiCreateCurrentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCurrentOrder(requestParameters: OrdersApiCreateCurrentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.createCurrentOrder(requestParameters.merchantId, requestParameters.orderCreateDto, requestParameters.lineItems, requestParameters.location, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Line Items from Order
         * @param {OrdersApiDeleteCurrentLineItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentLineItem(requestParameters: OrdersApiDeleteCurrentLineItemRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.deleteCurrentLineItem(requestParameters.id, requestParameters.merchantId, requestParameters.lineItems, requestParameters.location, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Order
         * @param {OrdersApiDeleteCurrentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrentOrder(requestParameters: OrdersApiDeleteCurrentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCurrentOrder(requestParameters.merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current Order
         * @param {OrdersApiGetCurrentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentOrder(requestParameters: OrdersApiGetCurrentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.getCurrentOrder(requestParameters.merchantId, requestParameters.lineItems, requestParameters.location, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Order
         * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.getOrder(requestParameters.id, requestParameters.lineItems, requestParameters.location, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my Orders
         * @param {OrdersApiGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(requestParameters: OrdersApiGetOrdersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OrdersPaginatedReponse> {
            return localVarFp.getOrders(requestParameters.page, requestParameters.limit, requestParameters.closed, requestParameters.lineItems, requestParameters.location, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch update Order, e.g. modify Location
         * @param {OrdersApiPatchUpdateCurrentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUpdateCurrentOrder(requestParameters: OrdersApiPatchUpdateCurrentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.patchUpdateCurrentOrder(requestParameters.orderPatchDto, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, requestParameters.merchantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pay for Order
         * @param {OrdersApiPostPaymentForCurrentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentForCurrentOrder(requestParameters: OrdersApiPostPaymentForCurrentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.postPaymentForCurrentOrder(requestParameters.merchantId, requestParameters.paymentCreateDto, requestParameters.lineItems, requestParameters.location, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
         * @param {OrdersApiPostUpdateCurrentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUpdateCurrentOrder(requestParameters: OrdersApiPostUpdateCurrentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.postUpdateCurrentOrder(requestParameters.merchantId, requestParameters.orderPostDto, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCurrentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateCurrentOrderRequest
 */
export interface OrdersApiCreateCurrentOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiCreateCurrentOrder
     */
    readonly merchantId: string

    /**
     * 
     * @type {OrderCreateDto}
     * @memberof OrdersApiCreateCurrentOrder
     */
    readonly orderCreateDto: OrderCreateDto

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiCreateCurrentOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiCreateCurrentOrder
     */
    readonly location?: boolean
}

/**
 * Request parameters for deleteCurrentLineItem operation in OrdersApi.
 * @export
 * @interface OrdersApiDeleteCurrentLineItemRequest
 */
export interface OrdersApiDeleteCurrentLineItemRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteCurrentLineItem
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteCurrentLineItem
     */
    readonly merchantId: string

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiDeleteCurrentLineItem
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiDeleteCurrentLineItem
     */
    readonly location?: boolean
}

/**
 * Request parameters for deleteCurrentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiDeleteCurrentOrderRequest
 */
export interface OrdersApiDeleteCurrentOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiDeleteCurrentOrder
     */
    readonly merchantId: string
}

/**
 * Request parameters for getCurrentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetCurrentOrderRequest
 */
export interface OrdersApiGetCurrentOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetCurrentOrder
     */
    readonly merchantId: string

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetCurrentOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetCurrentOrder
     */
    readonly location?: boolean
}

/**
 * Request parameters for getOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRequest
 */
export interface OrdersApiGetOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly id: string

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrder
     */
    readonly location?: boolean

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof OrdersApiGetOrder
     */
    readonly actingAs?: GetOrderActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly merchantId?: string
}

/**
 * Request parameters for getOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrdersRequest
 */
export interface OrdersApiGetOrdersRequest {
    /**
     * 
     * @type {number}
     * @memberof OrdersApiGetOrders
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof OrdersApiGetOrders
     */
    readonly limit?: number

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly closed?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly location?: boolean

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof OrdersApiGetOrders
     */
    readonly actingAs?: GetOrdersActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly merchantId?: string
}

/**
 * Request parameters for patchUpdateCurrentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiPatchUpdateCurrentOrderRequest
 */
export interface OrdersApiPatchUpdateCurrentOrderRequest {
    /**
     * 
     * @type {OrderPatchDto}
     * @memberof OrdersApiPatchUpdateCurrentOrder
     */
    readonly orderPatchDto: OrderPatchDto

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPatchUpdateCurrentOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPatchUpdateCurrentOrder
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPatchUpdateCurrentOrder
     */
    readonly idempotencyKey?: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPatchUpdateCurrentOrder
     */
    readonly merchantId?: string
}

/**
 * Request parameters for postPaymentForCurrentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiPostPaymentForCurrentOrderRequest
 */
export interface OrdersApiPostPaymentForCurrentOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostPaymentForCurrentOrder
     */
    readonly merchantId: string

    /**
     * 
     * @type {PaymentCreateDto}
     * @memberof OrdersApiPostPaymentForCurrentOrder
     */
    readonly paymentCreateDto: PaymentCreateDto

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostPaymentForCurrentOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostPaymentForCurrentOrder
     */
    readonly location?: boolean
}

/**
 * Request parameters for postUpdateCurrentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiPostUpdateCurrentOrderRequest
 */
export interface OrdersApiPostUpdateCurrentOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostUpdateCurrentOrder
     */
    readonly merchantId: string

    /**
     * 
     * @type {OrderPostDto}
     * @memberof OrdersApiPostUpdateCurrentOrder
     */
    readonly orderPostDto: OrderPostDto

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostUpdateCurrentOrder
     */
    readonly lineItems?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof OrdersApiPostUpdateCurrentOrder
     */
    readonly location?: boolean

    /**
     * 
     * @type {string}
     * @memberof OrdersApiPostUpdateCurrentOrder
     */
    readonly idempotencyKey?: string
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Create Order
     * @param {OrdersApiCreateCurrentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createCurrentOrder(requestParameters: OrdersApiCreateCurrentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).createCurrentOrder(requestParameters.merchantId, requestParameters.orderCreateDto, requestParameters.lineItems, requestParameters.location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Line Items from Order
     * @param {OrdersApiDeleteCurrentLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public deleteCurrentLineItem(requestParameters: OrdersApiDeleteCurrentLineItemRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).deleteCurrentLineItem(requestParameters.id, requestParameters.merchantId, requestParameters.lineItems, requestParameters.location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Order
     * @param {OrdersApiDeleteCurrentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public deleteCurrentOrder(requestParameters: OrdersApiDeleteCurrentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).deleteCurrentOrder(requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current Order
     * @param {OrdersApiGetCurrentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getCurrentOrder(requestParameters: OrdersApiGetCurrentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getCurrentOrder(requestParameters.merchantId, requestParameters.lineItems, requestParameters.location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Order
     * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrder(requestParameters.id, requestParameters.lineItems, requestParameters.location, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my Orders
     * @param {OrdersApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrders(requestParameters: OrdersApiGetOrdersRequest = {}, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrders(requestParameters.page, requestParameters.limit, requestParameters.closed, requestParameters.lineItems, requestParameters.location, requestParameters.actingAs, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch update Order, e.g. modify Location
     * @param {OrdersApiPatchUpdateCurrentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public patchUpdateCurrentOrder(requestParameters: OrdersApiPatchUpdateCurrentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).patchUpdateCurrentOrder(requestParameters.orderPatchDto, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, requestParameters.merchantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pay for Order
     * @param {OrdersApiPostPaymentForCurrentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public postPaymentForCurrentOrder(requestParameters: OrdersApiPostPaymentForCurrentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).postPaymentForCurrentOrder(requestParameters.merchantId, requestParameters.paymentCreateDto, requestParameters.lineItems, requestParameters.location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post update Order, e.g. add Variations & Modifiers in Line Items
     * @param {OrdersApiPostUpdateCurrentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public postUpdateCurrentOrder(requestParameters: OrdersApiPostUpdateCurrentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).postUpdateCurrentOrder(requestParameters.merchantId, requestParameters.orderPostDto, requestParameters.lineItems, requestParameters.location, requestParameters.idempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetOrderActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetOrderActingAsEnum = typeof GetOrderActingAsEnum[keyof typeof GetOrderActingAsEnum];
/**
 * @export
 */
export const GetOrdersActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetOrdersActingAsEnum = typeof GetOrdersActingAsEnum[keyof typeof GetOrdersActingAsEnum];
