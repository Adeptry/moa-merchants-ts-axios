/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Merchant } from '../moa-merchants-models';
// @ts-ignore
import { NestError } from '../moa-merchants-models';
// @ts-ignore
import { SquareConfirmOauthDto } from '../moa-merchants-models';
// @ts-ignore
import { StripeBillingPortalCreateOutput } from '../moa-merchants-models';
// @ts-ignore
import { StripeCheckoutCreateDto } from '../moa-merchants-models';
// @ts-ignore
import { StripeCheckoutDto } from '../moa-merchants-models';
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current Merchant
         * @param {boolean} [user] 
         * @param {boolean} [appConfig] 
         * @param {boolean} [locations] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeMerchant: async (user?: boolean, appConfig?: boolean, locations?: boolean, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (appConfig !== undefined) {
                localVarQueryParameter['appConfig'] = appConfig;
            }

            if (locations !== undefined) {
                localVarQueryParameter['locations'] = locations;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeSquareSync: async (xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me/square/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start create billing session url
         * @param {string} returnUrl 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeStripeBillingSession: async (returnUrl: string, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'returnUrl' is not null or undefined
            assertParamExists('getMeStripeBillingSession', 'returnUrl', returnUrl)
            const localVarPath = `/v2/merchants/me/stripe/billing-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeMerchant: async (xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {SquareConfirmOauthDto} squareConfirmOauthDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeSquareOauth: async (squareConfirmOauthDto: SquareConfirmOauthDto, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'squareConfirmOauthDto' is not null or undefined
            assertParamExists('postMeSquareOauth', 'squareConfirmOauthDto', squareConfirmOauthDto)
            const localVarPath = `/v2/merchants/me/square/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(squareConfirmOauthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeStripeCheckout: async (stripeCheckoutCreateDto: StripeCheckoutCreateDto, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeCheckoutCreateDto' is not null or undefined
            assertParamExists('postMeStripeCheckout', 'stripeCheckoutCreateDto', stripeCheckoutCreateDto)
            const localVarPath = `/v2/merchants/me/stripe/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stripeCheckoutCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantsApi - functional programming interface
 * @export
 */
export const MerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current Merchant
         * @param {boolean} [user] 
         * @param {boolean} [appConfig] 
         * @param {boolean} [locations] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeMerchant(user?: boolean, appConfig?: boolean, locations?: boolean, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeMerchant(user, appConfig, locations, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeSquareSync(xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeSquareSync(xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start create billing session url
         * @param {string} returnUrl 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeStripeBillingSession(returnUrl: string, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeBillingPortalCreateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeStripeBillingSession(returnUrl, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMeMerchant(xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMeMerchant(xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {SquareConfirmOauthDto} squareConfirmOauthDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMeSquareOauth(squareConfirmOauthDto: SquareConfirmOauthDto, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMeSquareOauth(squareConfirmOauthDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMeStripeCheckout(stripeCheckoutCreateDto: StripeCheckoutCreateDto, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCheckoutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMeStripeCheckout(stripeCheckoutCreateDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantsApi - factory interface
 * @export
 */
export const MerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current Merchant
         * @param {MerchantsApiGetMeMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeMerchant(requestParameters: MerchantsApiGetMeMerchantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Merchant> {
            return localVarFp.getMeMerchant(requestParameters.user, requestParameters.appConfig, requestParameters.locations, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {MerchantsApiGetMeSquareSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeSquareSync(requestParameters: MerchantsApiGetMeSquareSyncRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMeSquareSync(requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start create billing session url
         * @param {MerchantsApiGetMeStripeBillingSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeStripeBillingSession(requestParameters: MerchantsApiGetMeStripeBillingSessionRequest, options?: AxiosRequestConfig): AxiosPromise<StripeBillingPortalCreateOutput> {
            return localVarFp.getMeStripeBillingSession(requestParameters.returnUrl, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {MerchantsApiPostMeMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeMerchant(requestParameters: MerchantsApiPostMeMerchantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Merchant> {
            return localVarFp.postMeMerchant(requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {MerchantsApiPostMeSquareOauthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeSquareOauth(requestParameters: MerchantsApiPostMeSquareOauthRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postMeSquareOauth(requestParameters.squareConfirmOauthDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {MerchantsApiPostMeStripeCheckoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeStripeCheckout(requestParameters: MerchantsApiPostMeStripeCheckoutRequest, options?: AxiosRequestConfig): AxiosPromise<StripeCheckoutDto> {
            return localVarFp.postMeStripeCheckout(requestParameters.stripeCheckoutCreateDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMeMerchant operation in MerchantsApi.
 * @export
 * @interface MerchantsApiGetMeMerchantRequest
 */
export interface MerchantsApiGetMeMerchantRequest {
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsApiGetMeMerchant
     */
    readonly user?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MerchantsApiGetMeMerchant
     */
    readonly appConfig?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MerchantsApiGetMeMerchant
     */
    readonly locations?: boolean

    /**
     * 
     * @type {any}
     * @memberof MerchantsApiGetMeMerchant
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for getMeSquareSync operation in MerchantsApi.
 * @export
 * @interface MerchantsApiGetMeSquareSyncRequest
 */
export interface MerchantsApiGetMeSquareSyncRequest {
    /**
     * 
     * @type {any}
     * @memberof MerchantsApiGetMeSquareSync
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for getMeStripeBillingSession operation in MerchantsApi.
 * @export
 * @interface MerchantsApiGetMeStripeBillingSessionRequest
 */
export interface MerchantsApiGetMeStripeBillingSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantsApiGetMeStripeBillingSession
     */
    readonly returnUrl: string

    /**
     * 
     * @type {any}
     * @memberof MerchantsApiGetMeStripeBillingSession
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for postMeMerchant operation in MerchantsApi.
 * @export
 * @interface MerchantsApiPostMeMerchantRequest
 */
export interface MerchantsApiPostMeMerchantRequest {
    /**
     * 
     * @type {any}
     * @memberof MerchantsApiPostMeMerchant
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for postMeSquareOauth operation in MerchantsApi.
 * @export
 * @interface MerchantsApiPostMeSquareOauthRequest
 */
export interface MerchantsApiPostMeSquareOauthRequest {
    /**
     * 
     * @type {SquareConfirmOauthDto}
     * @memberof MerchantsApiPostMeSquareOauth
     */
    readonly squareConfirmOauthDto: SquareConfirmOauthDto

    /**
     * 
     * @type {any}
     * @memberof MerchantsApiPostMeSquareOauth
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for postMeStripeCheckout operation in MerchantsApi.
 * @export
 * @interface MerchantsApiPostMeStripeCheckoutRequest
 */
export interface MerchantsApiPostMeStripeCheckoutRequest {
    /**
     * 
     * @type {StripeCheckoutCreateDto}
     * @memberof MerchantsApiPostMeStripeCheckout
     */
    readonly stripeCheckoutCreateDto: StripeCheckoutCreateDto

    /**
     * 
     * @type {any}
     * @memberof MerchantsApiPostMeStripeCheckout
     */
    readonly xCustomLang?: any
}

/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export class MerchantsApi extends BaseAPI {
    /**
     * 
     * @summary Get current Merchant
     * @param {MerchantsApiGetMeMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public getMeMerchant(requestParameters: MerchantsApiGetMeMerchantRequest = {}, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getMeMerchant(requestParameters.user, requestParameters.appConfig, requestParameters.locations, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync your Square Catalog
     * @param {MerchantsApiGetMeSquareSyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public getMeSquareSync(requestParameters: MerchantsApiGetMeSquareSyncRequest = {}, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getMeSquareSync(requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start create billing session url
     * @param {MerchantsApiGetMeStripeBillingSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public getMeStripeBillingSession(requestParameters: MerchantsApiGetMeStripeBillingSessionRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getMeStripeBillingSession(requestParameters.returnUrl, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Merchant for current User
     * @param {MerchantsApiPostMeMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public postMeMerchant(requestParameters: MerchantsApiPostMeMerchantRequest = {}, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).postMeMerchant(requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm Square Oauth
     * @param {MerchantsApiPostMeSquareOauthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public postMeSquareOauth(requestParameters: MerchantsApiPostMeSquareOauthRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).postMeSquareOauth(requestParameters.squareConfirmOauthDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Stripe checkout
     * @param {MerchantsApiPostMeStripeCheckoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public postMeStripeCheckout(requestParameters: MerchantsApiPostMeStripeCheckoutRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).postMeStripeCheckout(requestParameters.stripeCheckoutCreateDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }
}

