/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Merchant } from '../moa-merchants-models';
// @ts-ignore
import { NestError } from '../moa-merchants-models';
// @ts-ignore
import { StripeBillingPortalCreateInput } from '../moa-merchants-models';
// @ts-ignore
import { StripeBillingPortalCreateOutput } from '../moa-merchants-models';
// @ts-ignore
import { StripeCheckoutCreateDto } from '../moa-merchants-models';
// @ts-ignore
import { StripeCheckoutDto } from '../moa-merchants-models';
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {string} oauthAccessCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSquareOauth: async (oauthAccessCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthAccessCode' is not null or undefined
            assertParamExists('confirmSquareOauth', 'oauthAccessCode', oauthAccessCode)
            const localVarPath = `/v2/merchants/me/square/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oauthAccessCode !== undefined) {
                localVarQueryParameter['oauthAccessCode'] = oauthAccessCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm Square checkout
         * @param {StripeCheckoutDto} stripeCheckoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmStripeCheckout: async (stripeCheckoutDto: StripeCheckoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeCheckoutDto' is not null or undefined
            assertParamExists('confirmStripeCheckout', 'stripeCheckoutDto', stripeCheckoutDto)
            const localVarPath = `/v2/merchants/me/stripe/checkout/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stripeCheckoutDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentMerchant: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startStripeCheckout: async (stripeCheckoutCreateDto: StripeCheckoutCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeCheckoutCreateDto' is not null or undefined
            assertParamExists('startStripeCheckout', 'stripeCheckoutCreateDto', stripeCheckoutCreateDto)
            const localVarPath = `/v2/merchants/me/stripe/checkout/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stripeCheckoutCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start create billing session url
         * @param {StripeBillingPortalCreateInput} stripeBillingPortalCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeCreateBillingSessionUrl: async (stripeBillingPortalCreateInput: StripeBillingPortalCreateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stripeBillingPortalCreateInput' is not null or undefined
            assertParamExists('stripeCreateBillingSessionUrl', 'stripeBillingPortalCreateInput', stripeBillingPortalCreateInput)
            const localVarPath = `/v2/merchants/me/stripe/billing-session/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stripeBillingPortalCreateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareCatalog: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me/square/catalog/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync your Square Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareLocations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/merchants/me/square/locations/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantsApi - functional programming interface
 * @export
 */
export const MerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {string} oauthAccessCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmSquareOauth(oauthAccessCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmSquareOauth(oauthAccessCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm Square checkout
         * @param {StripeCheckoutDto} stripeCheckoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmStripeCheckout(stripeCheckoutDto: StripeCheckoutDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmStripeCheckout(stripeCheckoutDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMerchant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMerchant(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentMerchant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Merchant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentMerchant(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startStripeCheckout(stripeCheckoutCreateDto: StripeCheckoutCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCheckoutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startStripeCheckout(stripeCheckoutCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start create billing session url
         * @param {StripeBillingPortalCreateInput} stripeBillingPortalCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeCreateBillingSessionUrl(stripeBillingPortalCreateInput: StripeBillingPortalCreateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeBillingPortalCreateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeCreateBillingSessionUrl(stripeBillingPortalCreateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncSquareCatalog(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncSquareCatalog(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sync your Square Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncSquareLocations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncSquareLocations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantsApi - factory interface
 * @export
 */
export const MerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Confirm Square Oauth
         * @param {string} oauthAccessCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSquareOauth(oauthAccessCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.confirmSquareOauth(oauthAccessCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm Square checkout
         * @param {StripeCheckoutDto} stripeCheckoutDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmStripeCheckout(stripeCheckoutDto: StripeCheckoutDto, options?: any): AxiosPromise<Merchant> {
            return localVarFp.confirmStripeCheckout(stripeCheckoutDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Merchant for current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchant(options?: any): AxiosPromise<void> {
            return localVarFp.createMerchant(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentMerchant(options?: any): AxiosPromise<Merchant> {
            return localVarFp.getCurrentMerchant(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Stripe checkout
         * @param {StripeCheckoutCreateDto} stripeCheckoutCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startStripeCheckout(stripeCheckoutCreateDto: StripeCheckoutCreateDto, options?: any): AxiosPromise<StripeCheckoutDto> {
            return localVarFp.startStripeCheckout(stripeCheckoutCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start create billing session url
         * @param {StripeBillingPortalCreateInput} stripeBillingPortalCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeCreateBillingSessionUrl(stripeBillingPortalCreateInput: StripeBillingPortalCreateInput, options?: any): AxiosPromise<StripeBillingPortalCreateOutput> {
            return localVarFp.stripeCreateBillingSessionUrl(stripeBillingPortalCreateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync your Square Catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareCatalog(options?: any): AxiosPromise<void> {
            return localVarFp.syncSquareCatalog(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync your Square Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncSquareLocations(options?: any): AxiosPromise<void> {
            return localVarFp.syncSquareLocations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for confirmSquareOauth operation in MerchantsApi.
 * @export
 * @interface MerchantsApiConfirmSquareOauthRequest
 */
export interface MerchantsApiConfirmSquareOauthRequest {
    /**
     * 
     * @type {string}
     * @memberof MerchantsApiConfirmSquareOauth
     */
    readonly oauthAccessCode: string
}

/**
 * Request parameters for confirmStripeCheckout operation in MerchantsApi.
 * @export
 * @interface MerchantsApiConfirmStripeCheckoutRequest
 */
export interface MerchantsApiConfirmStripeCheckoutRequest {
    /**
     * 
     * @type {StripeCheckoutDto}
     * @memberof MerchantsApiConfirmStripeCheckout
     */
    readonly stripeCheckoutDto: StripeCheckoutDto
}

/**
 * Request parameters for startStripeCheckout operation in MerchantsApi.
 * @export
 * @interface MerchantsApiStartStripeCheckoutRequest
 */
export interface MerchantsApiStartStripeCheckoutRequest {
    /**
     * 
     * @type {StripeCheckoutCreateDto}
     * @memberof MerchantsApiStartStripeCheckout
     */
    readonly stripeCheckoutCreateDto: StripeCheckoutCreateDto
}

/**
 * Request parameters for stripeCreateBillingSessionUrl operation in MerchantsApi.
 * @export
 * @interface MerchantsApiStripeCreateBillingSessionUrlRequest
 */
export interface MerchantsApiStripeCreateBillingSessionUrlRequest {
    /**
     * 
     * @type {StripeBillingPortalCreateInput}
     * @memberof MerchantsApiStripeCreateBillingSessionUrl
     */
    readonly stripeBillingPortalCreateInput: StripeBillingPortalCreateInput
}

/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export class MerchantsApi extends BaseAPI {
    /**
     * 
     * @summary Confirm Square Oauth
     * @param {MerchantsApiConfirmSquareOauthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public confirmSquareOauth(requestParameters: MerchantsApiConfirmSquareOauthRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).confirmSquareOauth(requestParameters.oauthAccessCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm Square checkout
     * @param {MerchantsApiConfirmStripeCheckoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public confirmStripeCheckout(requestParameters: MerchantsApiConfirmStripeCheckoutRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).confirmStripeCheckout(requestParameters.stripeCheckoutDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Merchant for current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public createMerchant(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).createMerchant(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current Merchant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public getCurrentMerchant(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getCurrentMerchant(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Stripe checkout
     * @param {MerchantsApiStartStripeCheckoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public startStripeCheckout(requestParameters: MerchantsApiStartStripeCheckoutRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).startStripeCheckout(requestParameters.stripeCheckoutCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start create billing session url
     * @param {MerchantsApiStripeCreateBillingSessionUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public stripeCreateBillingSessionUrl(requestParameters: MerchantsApiStripeCreateBillingSessionUrlRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).stripeCreateBillingSessionUrl(requestParameters.stripeBillingPortalCreateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync your Square Catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public syncSquareCatalog(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).syncSquareCatalog(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync your Square Locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public syncSquareLocations(options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).syncSquareLocations(options).then((request) => request(this.axios, this.basePath));
    }
}
