/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Location } from '../moa-merchants-models';
// @ts-ignore
import { LocationPaginatedResponse } from '../moa-merchants-models';
// @ts-ignore
import { LocationUpdateAllDto } from '../moa-merchants-models';
// @ts-ignore
import { LocationUpdateDto } from '../moa-merchants-models';
// @ts-ignore
import { NestError } from '../moa-merchants-models';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all your Locations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [address] 
         * @param {boolean} [businessHours] 
         * @param {GetMeLocationsActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeLocations: async (page?: number, limit?: number, address?: boolean, businessHours?: boolean, actingAs?: GetMeLocationsActingAsEnum, merchantIdOrPath?: string, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/locations/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (businessHours !== undefined) {
                localVarQueryParameter['businessHours'] = businessHours;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Location with ID
         * @param {string} id 
         * @param {GetOneLocationActingAsEnum} actingAs 
         * @param {string} [merchantIdOrPath] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneLocation: async (id: string, actingAs: GetOneLocationActingAsEnum, merchantIdOrPath?: string, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneLocation', 'id', id)
            // verify required parameter 'actingAs' is not null or undefined
            assertParamExists('getOneLocation', 'actingAs', actingAs)
            const localVarPath = `/v2/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Locations
         * @param {Array<LocationUpdateAllDto>} locationUpdateAllDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchManyLocations: async (locationUpdateAllDto: Array<LocationUpdateAllDto>, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationUpdateAllDto' is not null or undefined
            assertParamExists('patchManyLocations', 'locationUpdateAllDto', locationUpdateAllDto)
            const localVarPath = `/v2/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationUpdateAllDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Location
         * @param {string} id 
         * @param {LocationUpdateDto} locationUpdateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOneLocation: async (id: string, locationUpdateDto: LocationUpdateDto, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchOneLocation', 'id', id)
            // verify required parameter 'locationUpdateDto' is not null or undefined
            assertParamExists('patchOneLocation', 'locationUpdateDto', locationUpdateDto)
            const localVarPath = `/v2/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all your Locations
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [address] 
         * @param {boolean} [businessHours] 
         * @param {GetMeLocationsActingAsEnum} [actingAs] 
         * @param {string} [merchantIdOrPath] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeLocations(page?: number, limit?: number, address?: boolean, businessHours?: boolean, actingAs?: GetMeLocationsActingAsEnum, merchantIdOrPath?: string, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeLocations(page, limit, address, businessHours, actingAs, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a Location with ID
         * @param {string} id 
         * @param {GetOneLocationActingAsEnum} actingAs 
         * @param {string} [merchantIdOrPath] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneLocation(id: string, actingAs: GetOneLocationActingAsEnum, merchantIdOrPath?: string, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneLocation(id, actingAs, merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Locations
         * @param {Array<LocationUpdateAllDto>} locationUpdateAllDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchManyLocations(locationUpdateAllDto: Array<LocationUpdateAllDto>, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchManyLocations(locationUpdateAllDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Location
         * @param {string} id 
         * @param {LocationUpdateDto} locationUpdateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOneLocation(id: string, locationUpdateDto: LocationUpdateDto, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOneLocation(id, locationUpdateDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all your Locations
         * @param {LocationsApiGetMeLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeLocations(requestParameters: LocationsApiGetMeLocationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LocationPaginatedResponse> {
            return localVarFp.getMeLocations(requestParameters.page, requestParameters.limit, requestParameters.address, requestParameters.businessHours, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Location with ID
         * @param {LocationsApiGetOneLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneLocation(requestParameters: LocationsApiGetOneLocationRequest, options?: AxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.getOneLocation(requestParameters.id, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Locations
         * @param {LocationsApiPatchManyLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchManyLocations(requestParameters: LocationsApiPatchManyLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Location>> {
            return localVarFp.patchManyLocations(requestParameters.locationUpdateAllDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Location
         * @param {LocationsApiPatchOneLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOneLocation(requestParameters: LocationsApiPatchOneLocationRequest, options?: AxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.patchOneLocation(requestParameters.id, requestParameters.locationUpdateDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMeLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiGetMeLocationsRequest
 */
export interface LocationsApiGetMeLocationsRequest {
    /**
     * 
     * @type {number}
     * @memberof LocationsApiGetMeLocations
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocationsApiGetMeLocations
     */
    readonly limit?: number

    /**
     * 
     * @type {boolean}
     * @memberof LocationsApiGetMeLocations
     */
    readonly address?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationsApiGetMeLocations
     */
    readonly businessHours?: boolean

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof LocationsApiGetMeLocations
     */
    readonly actingAs?: GetMeLocationsActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof LocationsApiGetMeLocations
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {any}
     * @memberof LocationsApiGetMeLocations
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for getOneLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiGetOneLocationRequest
 */
export interface LocationsApiGetOneLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationsApiGetOneLocation
     */
    readonly id: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof LocationsApiGetOneLocation
     */
    readonly actingAs: GetOneLocationActingAsEnum

    /**
     * 
     * @type {string}
     * @memberof LocationsApiGetOneLocation
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {any}
     * @memberof LocationsApiGetOneLocation
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for patchManyLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiPatchManyLocationsRequest
 */
export interface LocationsApiPatchManyLocationsRequest {
    /**
     * 
     * @type {Array<LocationUpdateAllDto>}
     * @memberof LocationsApiPatchManyLocations
     */
    readonly locationUpdateAllDto: Array<LocationUpdateAllDto>

    /**
     * 
     * @type {any}
     * @memberof LocationsApiPatchManyLocations
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for patchOneLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiPatchOneLocationRequest
 */
export interface LocationsApiPatchOneLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationsApiPatchOneLocation
     */
    readonly id: string

    /**
     * 
     * @type {LocationUpdateDto}
     * @memberof LocationsApiPatchOneLocation
     */
    readonly locationUpdateDto: LocationUpdateDto

    /**
     * 
     * @type {any}
     * @memberof LocationsApiPatchOneLocation
     */
    readonly xCustomLang?: any
}

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI {
    /**
     * 
     * @summary Get all your Locations
     * @param {LocationsApiGetMeLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public getMeLocations(requestParameters: LocationsApiGetMeLocationsRequest = {}, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getMeLocations(requestParameters.page, requestParameters.limit, requestParameters.address, requestParameters.businessHours, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Location with ID
     * @param {LocationsApiGetOneLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public getOneLocation(requestParameters: LocationsApiGetOneLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getOneLocation(requestParameters.id, requestParameters.actingAs, requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Locations
     * @param {LocationsApiPatchManyLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public patchManyLocations(requestParameters: LocationsApiPatchManyLocationsRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).patchManyLocations(requestParameters.locationUpdateAllDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Location
     * @param {LocationsApiPatchOneLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public patchOneLocation(requestParameters: LocationsApiPatchOneLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).patchOneLocation(requestParameters.id, requestParameters.locationUpdateDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetMeLocationsActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetMeLocationsActingAsEnum = typeof GetMeLocationsActingAsEnum[keyof typeof GetMeLocationsActingAsEnum];
/**
 * @export
 */
export const GetOneLocationActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetOneLocationActingAsEnum = typeof GetOneLocationActingAsEnum[keyof typeof GetOneLocationActingAsEnum];
