/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppConfig } from '../moa-merchants-models';
// @ts-ignore
import { AppConfigUpdateDto } from '../moa-merchants-models';
// @ts-ignore
import { NestError } from '../moa-merchants-models';
/**
 * AppConfigsApi - axios parameter creator
 * @export
 */
export const AppConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Config for Merchant ID
         * @param {string} merchantIdOrPath 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfig: async (merchantIdOrPath: string, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantIdOrPath' is not null or undefined
            assertParamExists('getAppConfig', 'merchantIdOrPath', merchantIdOrPath)
            const localVarPath = `/v2/app-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get your Config
         * @param {string} [merchantIdOrPath] 
         * @param {GetMeAppConfigActingAsEnum} [actingAs] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeAppConfig: async (merchantIdOrPath?: string, actingAs?: GetMeAppConfigActingAsEnum, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (merchantIdOrPath !== undefined) {
                localVarQueryParameter['merchantIdOrPath'] = merchantIdOrPath;
            }

            if (actingAs !== undefined) {
                localVarQueryParameter['actingAs'] = actingAs;
            }

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update your Config
         * @param {AppConfigUpdateDto} appConfigUpdateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMeAppConfig: async (appConfigUpdateDto: AppConfigUpdateDto, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appConfigUpdateDto' is not null or undefined
            assertParamExists('patchMeAppConfig', 'appConfigUpdateDto', appConfigUpdateDto)
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appConfigUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create your Config
         * @param {AppConfigUpdateDto} appConfigUpdateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeAppConfig: async (appConfigUpdateDto: AppConfigUpdateDto, xCustomLang?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appConfigUpdateDto' is not null or undefined
            assertParamExists('postMeAppConfig', 'appConfigUpdateDto', appConfigUpdateDto)
            const localVarPath = `/v2/app-config/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appConfigUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload icon
         * @param {any} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeIconUpload: async (xCustomLang?: any, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/app-config/me/icon/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = typeof xCustomLang === 'string'
                    ? xCustomLang
                    : JSON.stringify(xCustomLang);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppConfigsApi - functional programming interface
 * @export
 */
export const AppConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Config for Merchant ID
         * @param {string} merchantIdOrPath 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppConfig(merchantIdOrPath: string, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppConfig(merchantIdOrPath, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get your Config
         * @param {string} [merchantIdOrPath] 
         * @param {GetMeAppConfigActingAsEnum} [actingAs] 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeAppConfig(merchantIdOrPath?: string, actingAs?: GetMeAppConfigActingAsEnum, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeAppConfig(merchantIdOrPath, actingAs, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update your Config
         * @param {AppConfigUpdateDto} appConfigUpdateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMeAppConfig(appConfigUpdateDto: AppConfigUpdateDto, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMeAppConfig(appConfigUpdateDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create your Config
         * @param {AppConfigUpdateDto} appConfigUpdateDto 
         * @param {any} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMeAppConfig(appConfigUpdateDto: AppConfigUpdateDto, xCustomLang?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMeAppConfig(appConfigUpdateDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload icon
         * @param {any} [xCustomLang] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMeIconUpload(xCustomLang?: any, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMeIconUpload(xCustomLang, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppConfigsApi - factory interface
 * @export
 */
export const AppConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppConfigsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Config for Merchant ID
         * @param {AppConfigsApiGetAppConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfig(requestParameters: AppConfigsApiGetAppConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AppConfig> {
            return localVarFp.getAppConfig(requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get your Config
         * @param {AppConfigsApiGetMeAppConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeAppConfig(requestParameters: AppConfigsApiGetMeAppConfigRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppConfig> {
            return localVarFp.getMeAppConfig(requestParameters.merchantIdOrPath, requestParameters.actingAs, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update your Config
         * @param {AppConfigsApiPatchMeAppConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMeAppConfig(requestParameters: AppConfigsApiPatchMeAppConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AppConfig> {
            return localVarFp.patchMeAppConfig(requestParameters.appConfigUpdateDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create your Config
         * @param {AppConfigsApiPostMeAppConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeAppConfig(requestParameters: AppConfigsApiPostMeAppConfigRequest, options?: AxiosRequestConfig): AxiosPromise<AppConfig> {
            return localVarFp.postMeAppConfig(requestParameters.appConfigUpdateDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload icon
         * @param {AppConfigsApiPostMeIconUploadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeIconUpload(requestParameters: AppConfigsApiPostMeIconUploadRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postMeIconUpload(requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAppConfig operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiGetAppConfigRequest
 */
export interface AppConfigsApiGetAppConfigRequest {
    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiGetAppConfig
     */
    readonly merchantIdOrPath: string

    /**
     * 
     * @type {any}
     * @memberof AppConfigsApiGetAppConfig
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for getMeAppConfig operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiGetMeAppConfigRequest
 */
export interface AppConfigsApiGetMeAppConfigRequest {
    /**
     * 
     * @type {string}
     * @memberof AppConfigsApiGetMeAppConfig
     */
    readonly merchantIdOrPath?: string

    /**
     * 
     * @type {'merchant' | 'customer'}
     * @memberof AppConfigsApiGetMeAppConfig
     */
    readonly actingAs?: GetMeAppConfigActingAsEnum

    /**
     * 
     * @type {any}
     * @memberof AppConfigsApiGetMeAppConfig
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for patchMeAppConfig operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPatchMeAppConfigRequest
 */
export interface AppConfigsApiPatchMeAppConfigRequest {
    /**
     * 
     * @type {AppConfigUpdateDto}
     * @memberof AppConfigsApiPatchMeAppConfig
     */
    readonly appConfigUpdateDto: AppConfigUpdateDto

    /**
     * 
     * @type {any}
     * @memberof AppConfigsApiPatchMeAppConfig
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for postMeAppConfig operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPostMeAppConfigRequest
 */
export interface AppConfigsApiPostMeAppConfigRequest {
    /**
     * 
     * @type {AppConfigUpdateDto}
     * @memberof AppConfigsApiPostMeAppConfig
     */
    readonly appConfigUpdateDto: AppConfigUpdateDto

    /**
     * 
     * @type {any}
     * @memberof AppConfigsApiPostMeAppConfig
     */
    readonly xCustomLang?: any
}

/**
 * Request parameters for postMeIconUpload operation in AppConfigsApi.
 * @export
 * @interface AppConfigsApiPostMeIconUploadRequest
 */
export interface AppConfigsApiPostMeIconUploadRequest {
    /**
     * 
     * @type {any}
     * @memberof AppConfigsApiPostMeIconUpload
     */
    readonly xCustomLang?: any

    /**
     * 
     * @type {File}
     * @memberof AppConfigsApiPostMeIconUpload
     */
    readonly file?: File
}

/**
 * AppConfigsApi - object-oriented interface
 * @export
 * @class AppConfigsApi
 * @extends {BaseAPI}
 */
export class AppConfigsApi extends BaseAPI {
    /**
     * 
     * @summary Get Config for Merchant ID
     * @param {AppConfigsApiGetAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public getAppConfig(requestParameters: AppConfigsApiGetAppConfigRequest, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).getAppConfig(requestParameters.merchantIdOrPath, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get your Config
     * @param {AppConfigsApiGetMeAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public getMeAppConfig(requestParameters: AppConfigsApiGetMeAppConfigRequest = {}, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).getMeAppConfig(requestParameters.merchantIdOrPath, requestParameters.actingAs, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update your Config
     * @param {AppConfigsApiPatchMeAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public patchMeAppConfig(requestParameters: AppConfigsApiPatchMeAppConfigRequest, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).patchMeAppConfig(requestParameters.appConfigUpdateDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create your Config
     * @param {AppConfigsApiPostMeAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public postMeAppConfig(requestParameters: AppConfigsApiPostMeAppConfigRequest, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).postMeAppConfig(requestParameters.appConfigUpdateDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload icon
     * @param {AppConfigsApiPostMeIconUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigsApi
     */
    public postMeIconUpload(requestParameters: AppConfigsApiPostMeIconUploadRequest = {}, options?: AxiosRequestConfig) {
        return AppConfigsApiFp(this.configuration).postMeIconUpload(requestParameters.xCustomLang, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetMeAppConfigActingAsEnum = {
    Merchant: 'merchant',
    Customer: 'customer'
} as const;
export type GetMeAppConfigActingAsEnum = typeof GetMeAppConfigActingAsEnum[keyof typeof GetMeAppConfigActingAsEnum];
