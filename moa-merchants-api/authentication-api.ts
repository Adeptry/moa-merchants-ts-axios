/* tslint:disable */
/* eslint-disable */
/**
 * MyOrderApp Merchants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthAppleLoginDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthConfirmEmailDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthEmailLoginDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthForgotPasswordDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthGoogleLoginDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthRegisterLoginDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthResetPasswordDto } from '../moa-merchants-models';
// @ts-ignore
import { AuthUpdateDto } from '../moa-merchants-models';
// @ts-ignore
import { LoginResponseType } from '../moa-merchants-models';
// @ts-ignore
import { User } from '../moa-merchants-models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Session
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthMe: async (xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update password
         * @param {AuthUpdateDto} authUpdateDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAuthMe: async (authUpdateDto: AuthUpdateDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authUpdateDto' is not null or undefined
            assertParamExists('patchAuthMe', 'authUpdateDto', authUpdateDto)
            const localVarPath = `/v2/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm email
         * @param {AuthConfirmEmailDto} authConfirmEmailDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailConfirm: async (authConfirmEmailDto: AuthConfirmEmailDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authConfirmEmailDto' is not null or undefined
            assertParamExists('postEmailConfirm', 'authConfirmEmailDto', authConfirmEmailDto)
            const localVarPath = `/v2/auth/email/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authConfirmEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get access token
         * @param {AuthEmailLoginDto} authEmailLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailLogin: async (authEmailLoginDto: AuthEmailLoginDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authEmailLoginDto' is not null or undefined
            assertParamExists('postEmailLogin', 'authEmailLoginDto', authEmailLoginDto)
            const localVarPath = `/v2/auth/email/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authEmailLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User and Authorize, note: tries to login first
         * @param {AuthRegisterLoginDto} authRegisterLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailRegister: async (authRegisterLoginDto: AuthRegisterLoginDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRegisterLoginDto' is not null or undefined
            assertParamExists('postEmailRegister', 'authRegisterLoginDto', authRegisterLoginDto)
            const localVarPath = `/v2/auth/email/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRegisterLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Apple login
         * @param {AuthAppleLoginDto} authAppleLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginApple: async (authAppleLoginDto: AuthAppleLoginDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authAppleLoginDto' is not null or undefined
            assertParamExists('postLoginApple', 'authAppleLoginDto', authAppleLoginDto)
            const localVarPath = `/v2/auth/apple/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authAppleLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Google login
         * @param {AuthGoogleLoginDto} authGoogleLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginGoogle: async (authGoogleLoginDto: AuthGoogleLoginDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authGoogleLoginDto' is not null or undefined
            assertParamExists('postLoginGoogle', 'authGoogleLoginDto', authGoogleLoginDto)
            const localVarPath = `/v2/auth/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authGoogleLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {AuthForgotPasswordDto} authForgotPasswordDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordForgot: async (authForgotPasswordDto: AuthForgotPasswordDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordDto' is not null or undefined
            assertParamExists('postPasswordForgot', 'authForgotPasswordDto', authForgotPasswordDto)
            const localVarPath = `/v2/auth/password/forgot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset password
         * @param {AuthResetPasswordDto} authResetPasswordDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordReset: async (authResetPasswordDto: AuthResetPasswordDto, xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordDto' is not null or undefined
            assertParamExists('postPasswordReset', 'authResetPasswordDto', authResetPasswordDto)
            const localVarPath = `/v2/auth/password/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh token
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefresh: async (xCustomLang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication Api-Key required
            await setApiKeyToObject(localVarHeaderParameter, "Api-Key", configuration)

            if (xCustomLang != null) {
                localVarHeaderParameter['x-custom-lang'] = String(xCustomLang);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Session
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthMe(xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthMe(xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update password
         * @param {AuthUpdateDto} authUpdateDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAuthMe(authUpdateDto: AuthUpdateDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAuthMe(authUpdateDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm email
         * @param {AuthConfirmEmailDto} authConfirmEmailDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmailConfirm(authConfirmEmailDto: AuthConfirmEmailDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmailConfirm(authConfirmEmailDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get access token
         * @param {AuthEmailLoginDto} authEmailLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmailLogin(authEmailLoginDto: AuthEmailLoginDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmailLogin(authEmailLoginDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create User and Authorize, note: tries to login first
         * @param {AuthRegisterLoginDto} authRegisterLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmailRegister(authRegisterLoginDto: AuthRegisterLoginDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmailRegister(authRegisterLoginDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Apple login
         * @param {AuthAppleLoginDto} authAppleLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLoginApple(authAppleLoginDto: AuthAppleLoginDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLoginApple(authAppleLoginDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Google login
         * @param {AuthGoogleLoginDto} authGoogleLoginDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLoginGoogle(authGoogleLoginDto: AuthGoogleLoginDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLoginGoogle(authGoogleLoginDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Forgot password
         * @param {AuthForgotPasswordDto} authForgotPasswordDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPasswordForgot(authForgotPasswordDto: AuthForgotPasswordDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPasswordForgot(authForgotPasswordDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset password
         * @param {AuthResetPasswordDto} authResetPasswordDto 
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPasswordReset(authResetPasswordDto: AuthResetPasswordDto, xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPasswordReset(authResetPasswordDto, xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh token
         * @param {string} [xCustomLang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRefresh(xCustomLang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRefresh(xCustomLang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Session
         * @param {AuthenticationApiDeleteAuthMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthMe(requestParameters: AuthenticationApiDeleteAuthMeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAuthMe(requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update password
         * @param {AuthenticationApiPatchAuthMeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAuthMe(requestParameters: AuthenticationApiPatchAuthMeRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.patchAuthMe(requestParameters.authUpdateDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm email
         * @param {AuthenticationApiPostEmailConfirmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailConfirm(requestParameters: AuthenticationApiPostEmailConfirmRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postEmailConfirm(requestParameters.authConfirmEmailDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get access token
         * @param {AuthenticationApiPostEmailLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailLogin(requestParameters: AuthenticationApiPostEmailLoginRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponseType> {
            return localVarFp.postEmailLogin(requestParameters.authEmailLoginDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User and Authorize, note: tries to login first
         * @param {AuthenticationApiPostEmailRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailRegister(requestParameters: AuthenticationApiPostEmailRegisterRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponseType> {
            return localVarFp.postEmailRegister(requestParameters.authRegisterLoginDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Apple login
         * @param {AuthenticationApiPostLoginAppleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginApple(requestParameters: AuthenticationApiPostLoginAppleRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponseType> {
            return localVarFp.postLoginApple(requestParameters.authAppleLoginDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Google login
         * @param {AuthenticationApiPostLoginGoogleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginGoogle(requestParameters: AuthenticationApiPostLoginGoogleRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponseType> {
            return localVarFp.postLoginGoogle(requestParameters.authGoogleLoginDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forgot password
         * @param {AuthenticationApiPostPasswordForgotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordForgot(requestParameters: AuthenticationApiPostPasswordForgotRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postPasswordForgot(requestParameters.authForgotPasswordDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset password
         * @param {AuthenticationApiPostPasswordResetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordReset(requestParameters: AuthenticationApiPostPasswordResetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postPasswordReset(requestParameters.authResetPasswordDto, requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh token
         * @param {AuthenticationApiPostRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefresh(requestParameters: AuthenticationApiPostRefreshRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LoginResponseType> {
            return localVarFp.postRefresh(requestParameters.xCustomLang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAuthMe operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiDeleteAuthMeRequest
 */
export interface AuthenticationApiDeleteAuthMeRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiDeleteAuthMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for patchAuthMe operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPatchAuthMeRequest
 */
export interface AuthenticationApiPatchAuthMeRequest {
    /**
     * 
     * @type {AuthUpdateDto}
     * @memberof AuthenticationApiPatchAuthMe
     */
    readonly authUpdateDto: AuthUpdateDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPatchAuthMe
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postEmailConfirm operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostEmailConfirmRequest
 */
export interface AuthenticationApiPostEmailConfirmRequest {
    /**
     * 
     * @type {AuthConfirmEmailDto}
     * @memberof AuthenticationApiPostEmailConfirm
     */
    readonly authConfirmEmailDto: AuthConfirmEmailDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostEmailConfirm
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postEmailLogin operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostEmailLoginRequest
 */
export interface AuthenticationApiPostEmailLoginRequest {
    /**
     * 
     * @type {AuthEmailLoginDto}
     * @memberof AuthenticationApiPostEmailLogin
     */
    readonly authEmailLoginDto: AuthEmailLoginDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostEmailLogin
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postEmailRegister operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostEmailRegisterRequest
 */
export interface AuthenticationApiPostEmailRegisterRequest {
    /**
     * 
     * @type {AuthRegisterLoginDto}
     * @memberof AuthenticationApiPostEmailRegister
     */
    readonly authRegisterLoginDto: AuthRegisterLoginDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostEmailRegister
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postLoginApple operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostLoginAppleRequest
 */
export interface AuthenticationApiPostLoginAppleRequest {
    /**
     * 
     * @type {AuthAppleLoginDto}
     * @memberof AuthenticationApiPostLoginApple
     */
    readonly authAppleLoginDto: AuthAppleLoginDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostLoginApple
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postLoginGoogle operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostLoginGoogleRequest
 */
export interface AuthenticationApiPostLoginGoogleRequest {
    /**
     * 
     * @type {AuthGoogleLoginDto}
     * @memberof AuthenticationApiPostLoginGoogle
     */
    readonly authGoogleLoginDto: AuthGoogleLoginDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostLoginGoogle
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postPasswordForgot operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostPasswordForgotRequest
 */
export interface AuthenticationApiPostPasswordForgotRequest {
    /**
     * 
     * @type {AuthForgotPasswordDto}
     * @memberof AuthenticationApiPostPasswordForgot
     */
    readonly authForgotPasswordDto: AuthForgotPasswordDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostPasswordForgot
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postPasswordReset operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostPasswordResetRequest
 */
export interface AuthenticationApiPostPasswordResetRequest {
    /**
     * 
     * @type {AuthResetPasswordDto}
     * @memberof AuthenticationApiPostPasswordReset
     */
    readonly authResetPasswordDto: AuthResetPasswordDto

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostPasswordReset
     */
    readonly xCustomLang?: string
}

/**
 * Request parameters for postRefresh operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiPostRefreshRequest
 */
export interface AuthenticationApiPostRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiPostRefresh
     */
    readonly xCustomLang?: string
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Delete Session
     * @param {AuthenticationApiDeleteAuthMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public deleteAuthMe(requestParameters: AuthenticationApiDeleteAuthMeRequest = {}, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).deleteAuthMe(requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update password
     * @param {AuthenticationApiPatchAuthMeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public patchAuthMe(requestParameters: AuthenticationApiPatchAuthMeRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).patchAuthMe(requestParameters.authUpdateDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm email
     * @param {AuthenticationApiPostEmailConfirmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postEmailConfirm(requestParameters: AuthenticationApiPostEmailConfirmRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postEmailConfirm(requestParameters.authConfirmEmailDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get access token
     * @param {AuthenticationApiPostEmailLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postEmailLogin(requestParameters: AuthenticationApiPostEmailLoginRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postEmailLogin(requestParameters.authEmailLoginDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User and Authorize, note: tries to login first
     * @param {AuthenticationApiPostEmailRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postEmailRegister(requestParameters: AuthenticationApiPostEmailRegisterRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postEmailRegister(requestParameters.authRegisterLoginDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Apple login
     * @param {AuthenticationApiPostLoginAppleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postLoginApple(requestParameters: AuthenticationApiPostLoginAppleRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postLoginApple(requestParameters.authAppleLoginDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Google login
     * @param {AuthenticationApiPostLoginGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postLoginGoogle(requestParameters: AuthenticationApiPostLoginGoogleRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postLoginGoogle(requestParameters.authGoogleLoginDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forgot password
     * @param {AuthenticationApiPostPasswordForgotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postPasswordForgot(requestParameters: AuthenticationApiPostPasswordForgotRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postPasswordForgot(requestParameters.authForgotPasswordDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset password
     * @param {AuthenticationApiPostPasswordResetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postPasswordReset(requestParameters: AuthenticationApiPostPasswordResetRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postPasswordReset(requestParameters.authResetPasswordDto, requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh token
     * @param {AuthenticationApiPostRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postRefresh(requestParameters: AuthenticationApiPostRefreshRequest = {}, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postRefresh(requestParameters.xCustomLang, options).then((request) => request(this.axios, this.basePath));
    }
}

